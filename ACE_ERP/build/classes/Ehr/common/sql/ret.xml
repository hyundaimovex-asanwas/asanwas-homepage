<?xml version="1.0" encoding="euc-kr"?>

<sqls>
<!--
***********************************************************************
* @UseCase     : RETA010
* @description : 퇴직금중간정산신청
***********************************************************************
* 2007/03/23     조정호       최초작성
* 2007/05/04     김학수		  RETA010_SHR_EMP 주소,주민등록번호 추가
***********************************************************************
-->
    <!-- 선택 직원의 정보를 조회 한다. -->
    <sql name="RETA010_SHR_EMP">
        <description>선택 직원의 정보  조회</description>
        <query>
            <![CDATA[
            SELECT ENO_NO
                 , ENO_NM
                 , DPT_NM
                 , JOB_NM
                 , CET_NO
                 , TO_CHAR(HIRG_YMD, 'YYYY-MM-DD') AS HIRG_YMD
                 , OCC_CD||' '||OCC_NM AS OCC_NM
                 , NVL2(RET_YMD
                        , '0'
                        , NVL2(RAM_YMD3
                                , '0'
                                , NVL2(RAM_YMD2
                                        , '3'
                                        , NVL2(RAM_YMD
                                                , '2'
                                                , '1'
                                               )
                                       )
                               )
                        ) AS NXT_SEQ
                 , TRUNC(MONTHS_BETWEEN(SYSDATE, HIRG_YMD)/12) AS CON_YY
              FROM VI_T_CM_PERSON2
             WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 선택 직원의 정보를 조회 한다(인쇄용) -->
    <sql name="RETA010_SHR_EMP_PRINT">
        <description>선택 직원의 정보  조회</description>
        <query>
            <![CDATA[
            SELECT ENO_NO
                  ,ENO_NM
                  ,DPT_NM
                  ,JOB_NM
                  ,CET_NO
                  ,TO_CHAR(HIRG_YMD, 'YYYY-MM-DD') AS HIRG_YMD
                  ,OCC_CD||' '||OCC_NM AS OCC_NM
				  ,CET_NO
				  ,ADR_CT||' '||ADDRESS      AS ADDR1
				  ,RADR_CT||' '||RADR		 AS ADDR2
              FROM VI_T_CM_PERSON2 PERSON
             WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금중간정산신청 리스트 조회 -->
    <sql name="RETA010_SHR">
        <description>퇴직금중간정산신청 리스트 조회</description>
        <query>
            <![CDATA[
            SELECT A.ENO_NO
                 , B.ENO_NM AS ENO_NM
                 , SF_GET_COMMNAME(GUBUN, 'A2', B.JOB_CD)         AS JOB_NM                 -- 직위명
                 , SF_GET_DPTNAME(GUBUN, 'A4', B.DPT_CD) AS DPT_NM
                 ,  RET_GBN
                 , NEW_GBN
                 , PRV_GBN
              FROM T_CP_RETMASTER   A,
              T_CM_PERSON B
             WHERE A.ENO_NO = B.ENO_NO
                  AND A.ENO_NO LIKE '%'||?||'%'
            ]]>
        </query>
    </sql>

    <!-- 퇴직금중간정산신청 리스트 조회 -->
    <sql name="RETA010_DEL">
        <description>퇴직금중간정산신청 리스트 조회</description>
        <query>
            <![CDATA[
            DELETE
              FROM T_CP_RETMASTER
             WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금중간정산신청 리스트 조회 -->
    <sql name="RETA010_PRINT">
        <description>퇴직금중간정산신청 리스트 조회</description>
        <query>
            <![CDATA[
            SELECT ENO_NO
                  ,(SELECT ENO_NM
                      FROM T_CM_PERSON PERSON
                     WHERE REQ.ENO_NO = PERSON.ENO_NO) AS ENO_NM
                  ,OCC_CD
                  ,OCC_CD||' '||SF_GET_COMMNAME('01', 'A1', OCC_CD) AS OCC_NM
                  ,SF_GET_COMMNAME('01', 'A2', JOB_CD) AS JOB_NM
                  ,SF_GET_DPTNAME('01', 'A4', DPT_CD) AS DPT_NM
                  ,SEQ_NO
                  ,TO_CHAR(BASIC_YMD, 'YYYY-MM-DD') AS BASIC_YMD
                  ,APP_YN
                  ,TO_CHAR(IPT_YMD, 'YYYY-MM-DD') AS IPT_YMD
                  ,REASON
              FROM T_AC_RETACCREQ REQ
             WHERE ENO_NO = ? and seq_no = ?
          ORDER BY SEQ_NO
            ]]>
        </query>
    </sql>

    <!-- 퇴직금중간정산신청 리스트 조회 -->
    <sql name="RETA010_INS">
        <description>퇴직금중간정산신청 리스트 입력</description>
        <query>
            <![CDATA[
           INSERT INTO T_CP_RETMASTER (
   				ENO_NO, RET_GBN, NEW_GBN, PRV_GBN,PIS_YY)
		   VALUES ( ?, ?, ?, ?,'9999')
            ]]>
        </query>
    </sql>

    <!-- 퇴직금중간정산신청 리스트 조회 -->
    <sql name="RETA010_UPT">
        <description>퇴직금중간정산신청 리스트 수정</description>
        <query>
            <![CDATA[
				UPDATE T_CP_RETMASTER
				SET   RET_GBN = ?,
				         NEW_GBN = ?,
				         PRV_GBN = ?
				WHERE  ENO_NO  = ?
            ]]>
        </query>
    </sql>


<!--
***********************************************************************
* @UseCase     : RETA020
* @description : 퇴직금중간정산신청현황
***********************************************************************
* 2007/03/06     조정호       최초작성
***********************************************************************
-->
    <!-- 보험사 리스트 -->
    <sql name="RETA020_SHR_BNK">
        <description>보험사 리스트</description>
        <query>
            <![CDATA[
            SELECT RET.BNK_CD
                  ,SF_GET_COMMNAME('01', 'BR', BNK_CD) AS BNK_NM
              FROM T_AC_RETACCREQ ACC
        INNER JOIN VI_T_CM_PERSON PERSON
                ON ACC.ENO_NO = PERSON.ENO_NO
        INNER JOIN T_AC_RETINSURANCE RET
                ON RET.PIS_YY = TO_CHAR(TO_DATE(ACC.IPT_YMD), 'YYYY')
               AND RET.CET_NO = PERSON.CET_NO
             WHERE TO_CHAR(TO_DATE(ACC.IPT_YMD), 'YYYY-MM-DD')
           BETWEEN ?
               AND ?
               AND ACC.DPT_CD LIKE ?||'%'
          GROUP BY RET.BNK_CD
          ORDER BY RET.BNK_CD
            ]]>
        </query>
    </sql>

    <!-- 정산 신청 정보를 수정 한다. -->
    <sql name="RETA020_UPT">
        <description>신청 정보를 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETACCREQ
               SET BASIC_YMD = ?
                 , APP_YN  = ?
                 , APP_YMD = ?
                 , APP_PAY = ?
                 , UPT_MAN = ?
                 , UPT_YMD = SYSDATE
             WHERE ENO_NO  = ?
               AND SEQ_NO  = ?
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETA030
* @description : 퇴직금계산처리
***********************************************************************
* 2007/03/26     조정호       최초작성
***********************************************************************
-->

    <!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA030_SHR_PAY">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
--급여 산정 내역을 조회
SELECT   DECODE( TBL, '111', ROUND(BAS_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', BAS_AMT,   ROUND(BAS_AMT/LAST_DAY*PAST_DAY) ) ) AS BAS_AMT    --기본급여
             , DECODE( TBL, '111', ROUND(DUTY_AMT/LAST_DAY*PAST_DAY),DECODE( NUM, '4', DUTY_AMT,  ROUND(DUTY_AMT/LAST_DAY*PAST_DAY)) ) AS DUTY_AMT   --직무수당
             , DECODE( TBL, '111', ROUND(LAW_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', LAW_AMT,   ROUND(LAW_AMT/LAST_DAY*PAST_DAY) ) ) AS LAW_AMT   --법정수당
             , DECODE( TBL, '111', ROUND(BNS_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', BNS_AMT,   ROUND(BNS_AMT/LAST_DAY*PAST_DAY) ) ) AS BNS_AMT    --상여금
             , DECODE( TBL, '111', ROUND(ETC_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', ETC_AMT,   ROUND(ETC_AMT/LAST_DAY*PAST_DAY) ) ) AS OTH_AMT     --기타수당(교통비+출납수당)
                , HOL_AMT                                                            --기타지불(휴일근무수당)
                , PIS_YY                                             --년수
                , PIS_MM                                             --월수
                , LAST_DAY                                           --월일수
                , PAST_DAY                                           --근무일수
                , WORKING_DATE
                , FROM_YMD           AS STR_YMD
                , TO_YMD             AS END_YMD
                , TBL
             FROM (
                   --월별 총 근무 일수, 근무기간등을 가지고 오기
                   SELECT AA.NUM
                        , AA.PIS_YY
                        , AA.PIS_MM
                        , AA.ENO_NO
                        , LAST_DAY
                        , AA.BAS_AMT         --기본급여
                        , AA.TBL             --연봉TABLE TAG
                        , AA.DUTY_AMT        --직무수당
                        , AA.LAW_AMT          --법정수당
                        , AA.BNS_AMT         --상여금
                        , AA.ETC_AMT         --기타수당(교통비)
                        , AA.HOL_AMT         --기타수당(출납수당)
                        , DECODE( NUM
                                , 1       , LAST_DAY - TO_CHAR(FROM_YMD, 'DD') +1
                                , MONTHS  , TO_CHAR(TO_YMD, 'DD')
                                , LAST_DAY
                                  ) AS PAST_DAY
                        , DECODE( NUM
                                , 1       , PIS_YM||'-'||TO_CHAR(FROM_YMD, 'DD')||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                , MONTHS  , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||TO_CHAR(TO_YMD, 'DD')
                                , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                  ) AS WORKING_DATE
                        , DECODE( AA.NUM
                                , 1     , AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.FROM_YMD, 'DD')
                                ,         AA.PIS_YY||AA.PIS_MM||'01'
                                  ) AS FROM_YMD
                        , DECODE( AA.NUM
                                , MONTHS, AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.TO_YMD, 'DD')
                                ,         AA.PIS_YY||AA.PIS_MM||AA.LAST_DAY
                                  ) AS TO_YMD
                     FROM (
                           --월 마지막날 가지고 오기
                           SELECT ROW_NUMBER() OVER(ORDER BY C.PIS_YY, C.PIS_MM) AS NUM
                                , C.PIS_YY||'-'||C.PIS_MM AS PIS_YM
                                , C.PIS_YY
                                , C.PIS_MM
                                , C.ENO_NO
                                , C.FROM_YMD
                                , C.TO_YMD
                                , C.MONTHS
                                , TO_CHAR(LAST_DAY(TO_DATE(C.PIS_YY||C.PIS_MM||'01','YYYYMMDD')), 'DD') AS LAST_DAY
                                , NVL(C.BAS_AMT , D.BAS_AMT)             AS BAS_AMT      --기본급여
                                , NVL2(C.BAS_AMT , 999,111)              AS TBL          --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기
                                , NVL(C.DUTY_AMT, D.DUTY_AMT)            AS DUTY_AMT     --직무수당
                                , NVL(C.LAW_AMT  , D.LAW_AMT  )          AS LAW_AMT       --법정수당
                                , NVL(C.BNS_AMT , D.BNS_AMT )            AS BNS_AMT      --상여금
                                , NVL(C.ETC_AMT , D.ETC_AMT )            AS ETC_AMT      --기타수당(교통비)
                                , NVL(C.HOL_AMT , 0)                           AS HOL_AMT      --기타수당(출납수당)
                             FROM (
                                   --급여 마스터에서 급여 가지고 오기
                                      SELECT B.ENO_NO
                                           , B.PIS_YY
                                           , B.PIS_MM
                                           , B.FROM_YMD
                                           , B.TO_YMD
                                           , B.MONTHS
                                           , A.BAS_AMT
                                           , A.DUTY_AMT
                                           , A.LAW_AMT
                                           , A.BNS_AMT
                                           , A.ETC_AMT
                                           , A.HOL_AMT
                                        FROM (-- 급여 지급내용 가져오기
                                               SELECT E.ENO_NO
                                                   , E.PIS_YY
                                                   , E.PIS_MM
                                                   , NVL(E.BAS_AMT  , 0)  AS BAS_AMT    --  기본급
                                                   , NVL(E.DUTY_AMT , 0) AS DUTY_AMT	--직무수당
                                                   , NVL(E.LAW_AMT   , 0)  AS LAW_AMT	--법정수당
                                                   , NVL(E.BNS_AMT  , 0)  AS BNS_AMT	--상여금
                                                   , NVL(E.LSEV_AMT  , 0) + NVL(E.OSE_AMT   , 0) + NVL(E.ETC_AMT  , 0) + NVL(E.SPECIAL_AMT   , 0) + NVL(E.RUN_AMT  , 0) + NVL(E.ETC_AMT2   , 0) + NVL(E.T_SITE_AMT  , 0)  + NVL(E.T_NORTH_AMT  , 0) + NVL(E.T_GOAL_AMT , 0) + NVL(E.T_SITE_AMT  , 0)  AS ETC_AMT		--기타수당
                                                   , 0 AS HOL_AMT	--기타지불
                                                FROM T_CP_PAYMASTER E   -- 급여 MASTER
                                               WHERE E.SAL_GBN  = '0'
                                              ) A
                                           --날짜값 비교를 위해 더미 TABLE (근무 월을 가지고 오기)
                                           , (SELECT N.*
                                                FROM (SELECT NUM
                                                           , L.FROM_YMD
                                                           , L.TO_YMD
                                                           , L.MONTHS
                                                           , L.ENO_NO
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'YYYY')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'YYYY')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'YYYY')
                                                             WHEN M.NUM = 4 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'YYYY')
                                                              END AS PIS_YY
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'MM')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'MM')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'MM')
                                                             WHEN M.NUM = 4
                                                              AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'MM')
                                                              END AS PIS_MM
                                                        FROM (SELECT CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN ADD_MONTHS(TO_DATE(TO_CHAR(SCH_YMD,'YYYYMM')||'01'),-2)
                                                                     ELSE ADD_MONTHS(SCH_YMD,-3)+1
                                                                      END AS FROM_YMD
                                                                   , SCH_YMD AS TO_YMD
                                                                   , CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN 3
                                                                     ELSE 4
                                                                      END AS MONTHS
                                                                   , ENO_NO
                                                                   , SCH_YMD                AS MON1
                                                                   , ADD_MONTHS(SCH_YMD,-1) AS MON2
                                                                   , ADD_MONTHS(SCH_YMD,-2) AS MON3
                                                                   , ADD_MONTHS(SCH_YMD,-3) AS MON4
                                                                FROM (SELECT TO_DATE(?, 'YYYY-MM-DD') AS SCH_YMD
                                                                           , ? AS ENO_NO
                                                                        FROM DUAL)
                                                              ) L
                                                           , (SELECT 1 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 2 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 3 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 4 AS NUM
                                                                FROM DUAL
                                                              ) M
                                                      ) N
                                               WHERE MONTHS-NUM >= 0
                                              ) B
                                       WHERE B.ENO_NO = A.ENO_NO(+)
                                         AND B.PIS_YY = A.PIS_YY(+)
                                         AND B.PIS_MM = A.PIS_MM(+)
                                      ) C
                                   --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기 (급여 마스터에서 급여 항목이 없을 경우를 대비해)
                                   , (SELECT O.*
                                        FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.APY_YMD DESC) AS NUM
                                                   , H.ENO_NO
                                                   , H.BAS_AMT
                                                   , H.DUTY_AMT
                                                   , H.LAW_AMT
                                                   , H.BNS_AMT
                                                   , H.ETC_AMT
                                                FROM T_CP_PAYTABLE H
                                                   , T_CM_PERSON I
                                               WHERE I.ENO_NO = ?
                                                 AND H.ENO_NO = I.ENO_NO
                                              ) O
                                       WHERE O.NUM = 1
        							  ) D
        						  where c.eno_no=d.eno_no(+)
                              )AA
                      ) BB
            ORDER BY PIS_YY
                   , PIS_MM
            ]]>
        </query>
    </sql>

	<!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA030_SHR_PAY2">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
            SELECT
                SUM(TT.BAS_AMT) AS BAS_AMT
               ,SUM(TT.DUTY_AMT)	AS DUTY_AMT
               ,SUM(TT.LAW_AMT)	AS LAW_AMT
               ,SUM(TT.BNS_AMT)	AS BNS_AMT
               ,SUM(TT.OTH_AMT)	AS OTH_AMT
               ,SUM(TT.HOL_AMT)	AS HOL_AMT
            FROM (
  --급여 산정 내역을 조회
SELECT   DECODE( TBL, '111', ROUND(BAS_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', BAS_AMT,   ROUND(BAS_AMT/LAST_DAY*PAST_DAY) ) ) AS BAS_AMT    --기본급여
             , DECODE( TBL, '111', ROUND(DUTY_AMT/LAST_DAY*PAST_DAY),DECODE( NUM, '4', DUTY_AMT,  ROUND(DUTY_AMT/LAST_DAY*PAST_DAY)) ) AS DUTY_AMT   --직무수당
             , DECODE( TBL, '111', ROUND(LAW_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', LAW_AMT,   ROUND(LAW_AMT/LAST_DAY*PAST_DAY) ) ) AS LAW_AMT   --법정수당
             , DECODE( TBL, '111', ROUND(BNS_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', BNS_AMT,   ROUND(BNS_AMT/LAST_DAY*PAST_DAY) ) ) AS BNS_AMT    --상여금
             , DECODE( TBL, '111', ROUND(ETC_AMT/LAST_DAY*PAST_DAY), DECODE( NUM, '4', ETC_AMT,   ROUND(ETC_AMT/LAST_DAY*PAST_DAY) ) ) AS OTH_AMT     --기타수당(교통비+출납수당)
                , HOL_AMT                                                            --기타지불(휴일근무수당)
                , PIS_YY                                             --년수
                , PIS_MM                                             --월수
                , LAST_DAY                                           --월일수
                , PAST_DAY                                           --근무일수
                , WORKING_DATE
                , FROM_YMD           AS STR_YMD
                , TO_YMD             AS END_YMD
                , TBL
             FROM (
                   --월별 총 근무 일수, 근무기간등을 가지고 오기
                   SELECT AA.NUM
                        , AA.PIS_YY
                        , AA.PIS_MM
                        , AA.ENO_NO
                        , LAST_DAY
                        , AA.BAS_AMT         --기본급여
                        , AA.TBL             --연봉TABLE TAG
                        , AA.DUTY_AMT        --직무수당
                        , AA.LAW_AMT          --법정수당
                        , AA.BNS_AMT         --상여금
                        , AA.ETC_AMT         --기타수당(교통비)
                        , AA.HOL_AMT         --기타수당(출납수당)
                        , DECODE( NUM
                                , 1       , LAST_DAY - TO_CHAR(FROM_YMD, 'DD') +1
                                , MONTHS  , TO_CHAR(TO_YMD, 'DD')
                                , LAST_DAY
                                  ) AS PAST_DAY
                        , DECODE( NUM
                                , 1       , PIS_YM||'-'||TO_CHAR(FROM_YMD, 'DD')||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                , MONTHS  , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||TO_CHAR(TO_YMD, 'DD')
                                , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                  ) AS WORKING_DATE
                        , DECODE( AA.NUM
                                , 1     , AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.FROM_YMD, 'DD')
                                ,         AA.PIS_YY||AA.PIS_MM||'01'
                                  ) AS FROM_YMD
                        , DECODE( AA.NUM
                                , MONTHS, AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.TO_YMD, 'DD')
                                ,         AA.PIS_YY||AA.PIS_MM||AA.LAST_DAY
                                  ) AS TO_YMD
                     FROM (
                           --월 마지막날 가지고 오기
                           SELECT ROW_NUMBER() OVER(ORDER BY C.PIS_YY, C.PIS_MM) AS NUM
                                , C.PIS_YY||'-'||C.PIS_MM AS PIS_YM
                                , C.PIS_YY
                                , C.PIS_MM
                                , C.ENO_NO
                                , C.FROM_YMD
                                , C.TO_YMD
                                , C.MONTHS
                                , TO_CHAR(LAST_DAY(TO_DATE(C.PIS_YY||C.PIS_MM||'01','YYYYMMDD')), 'DD') AS LAST_DAY
                                , NVL(C.BAS_AMT , D.BAS_AMT)             AS BAS_AMT      --기본급여
                                , NVL2(C.BAS_AMT , 999,111)              AS TBL          --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기
                                , NVL(C.DUTY_AMT, D.DUTY_AMT)            AS DUTY_AMT     --직무수당
                                , NVL(C.LAW_AMT  , D.LAW_AMT  )          AS LAW_AMT       --법정수당
                                , NVL(C.BNS_AMT , D.BNS_AMT )            AS BNS_AMT      --상여금
                                , NVL(C.ETC_AMT , D.ETC_AMT )            AS ETC_AMT      --기타수당(교통비)
                                , NVL(C.HOL_AMT , 0)                           AS HOL_AMT      --기타수당(출납수당)
                             FROM (
                                   --급여 마스터에서 급여 가지고 오기
                                      SELECT B.ENO_NO
                                           , B.PIS_YY
                                           , B.PIS_MM
                                           , B.FROM_YMD
                                           , B.TO_YMD
                                           , B.MONTHS
                                           , A.BAS_AMT
                                           , A.DUTY_AMT
                                           , A.LAW_AMT
                                           , A.BNS_AMT
                                           , A.ETC_AMT
                                           , A.HOL_AMT                                  FROM (-- 급여 지급내용 가져오기
                                               SELECT E.ENO_NO
                                                   , E.PIS_YY
                                                   , E.PIS_MM
                                                   , NVL(E.BAS_AMT  , 0)  AS BAS_AMT
                                                   , NVL(E.DUTY_AMT , 0) AS DUTY_AMT	--직무수당
                                                   , NVL(E.LAW_AMT   , 0)  AS LAW_AMT	--법정수당
                                                   , NVL(E.BNS_AMT  , 0)  AS BNS_AMT	--상여금
                                                   , NVL(E.LSEV_AMT  , 0) + NVL(E.OSE_AMT   , 0) + NVL(E.ETC_AMT  , 0) + NVL(E.SPECIAL_AMT   , 0) + NVL(E.RUN_AMT  , 0) + NVL(E.ETC_AMT2   , 0) + NVL(E.T_SITE_AMT  , 0)  + NVL(E.T_NORTH_AMT  , 0) + NVL(E.T_GOAL_AMT , 0) + NVL(E.T_SITE_AMT  , 0)  AS ETC_AMT		--기타수당
                                                   , 0 AS HOL_AMT	--기타지불
                                                FROM T_CP_PAYMASTER E   -- 급여 MASTER
                                               WHERE E.SAL_GBN  = '0'
                                              ) A
                                           --날짜값 비교를 위해 더미 TABLE (근무 월을 가지고 오기)
                                           , (SELECT N.*
                                                FROM (SELECT NUM
                                                           , L.FROM_YMD
                                                           , L.TO_YMD
                                                           , L.MONTHS
                                                           , L.ENO_NO
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'YYYY')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'YYYY')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'YYYY')
                                                             WHEN M.NUM = 4 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'YYYY')
                                                              END AS PIS_YY
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'MM')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'MM')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'MM')
                                                             WHEN M.NUM = 4
                                                              AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'MM')
                                                              END AS PIS_MM
                                                        FROM (SELECT CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN ADD_MONTHS(TO_DATE(TO_CHAR(SCH_YMD,'YYYYMM')||'01'),-2)
                                                                     ELSE ADD_MONTHS(SCH_YMD,-3)+1
                                                                      END AS FROM_YMD
                                                                   , SCH_YMD AS TO_YMD
                                                                   , CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN 3
                                                                     ELSE 4
                                                                      END AS MONTHS
                                                                   , ENO_NO
                                                                   , SCH_YMD                AS MON1
                                                                   , ADD_MONTHS(SCH_YMD,-1) AS MON2
                                                                   , ADD_MONTHS(SCH_YMD,-2) AS MON3
                                                                   , ADD_MONTHS(SCH_YMD,-3) AS MON4
                                                                FROM (SELECT TO_DATE(?, 'YYYY-MM-DD') AS SCH_YMD
                                                                           , ? AS ENO_NO
                                                                        FROM DUAL)
                                                              ) L
                                                           , (SELECT 1 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 2 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 3 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 4 AS NUM
                                                                FROM DUAL
                                                              ) M
                                                      ) N
                                               WHERE MONTHS-NUM >= 0
                                              ) B
                                       WHERE B.ENO_NO = A.ENO_NO(+)
                                         AND B.PIS_YY = A.PIS_YY(+)
                                         AND B.PIS_MM = A.PIS_MM(+)
                                      ) C
                                   --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기 (급여 마스터에서 급여 항목이 없을 경우를 대비해)
                                   , (SELECT O.*
                                        FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.APY_YMD DESC) AS NUM
                                                   , H.ENO_NO
                                                   , H.BAS_AMT
                                                   , H.DUTY_AMT
                                                   , H.LAW_AMT
                                                   , H.BNS_AMT
                                                   , H.ETC_AMT
                                                FROM T_CP_PAYTABLE H
                                                   , T_CM_PERSON I
                                               WHERE I.ENO_NO = ?
                                                 AND H.ENO_NO = I.ENO_NO
                                              ) O
                                       WHERE O.NUM = 1
        							  ) D
        						  where c.eno_no=d.eno_no(+)
                              )AA
                      ) BB
            ORDER BY PIS_YY
                   , PIS_MM ) TT
            ]]>
        </query>
    </sql>


    <!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA030_SHR_PAY_RET">
        <description>퇴직금 산정 내역  조회</description>
        <query>
            <![CDATA[
            SELECT STR_YMD
                 , END_YMD
                 , END_YMD - STR_YMD + 1                                AS PAST_DAY
                 , TO_CHAR(TO_DATE(STR_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
                    ||CHR(13)||CHR(10)
                    ||TO_CHAR(TO_DATE(END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS WORKING_DATE
                 , BAS_AMT
                 , DUTY_AMT
                 , LAW_AMT
                 , BNS_AMT
                 , OTH_AMT
                 , HOL_AMT
                 , LSE_AMT AS LSEV_AMT
              FROM T_AC_RETPAY PAY
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 신청내역의 상여금 정보를 조회 한다. -->
    <sql name="RETA030_SHR_BONUS">
        <description>신청내역의 상여금 정보를 조회</description>
        <query>
            <![CDATA[
            SELECT ROW_NUMBER() OVER(ORDER BY A.PIS_YY DESC
                                            , A.PIS_MM DESC
                                            , A.SAL_GBN DESC
                                            , A.SEQ) AS NUM
                 , A.PIS_YY||'-'||A.PIS_MM AS PIS_YM
                 , A.SAL_GBN
                 , A.ENO_NO
                 , NVL(A.SALT_AMT,0)        AS SALT_AMT     -- 상여금
                 --, NVL(A.BAS_PCT,0)         AS BAS_PCT      -- 상여금의 비율
                 , NVL(B.BPAY_PCT, 0)       AS BAS_PCT     -- WORKLOG의 비율을 가져가야 함
                 , A.PIS_YY
                 , A.PIS_MM
                 , A.SEQ
              FROM (SELECT E.OCC_CD
                         , E.PIS_YY
                         , E.PIS_MM
                         , E.SAL_GBN
                         , E.ENO_NO
                         , E.SEQ
                         , NVL(E.SALT_AMT  , 0) + NVL(F.SALT_AMT  , 0) AS SALT_AMT
                         , E.BAS_PCT
                      FROM T_CP_PAYMASTER E   -- 상여 MASTER
                         , T_CP_ADDPAY F      -- 소급 테이블
                     WHERE E.SAL_GBN  IN ('1', '4')
                       AND E.OCC_CD   = F.OCC_CD(+)
                       AND E.PIS_YY   = F.PIS_YY(+)
                       AND E.PIS_MM   = F.PIS_MM(+)
                       AND E.SAL_GBN  = F.SAL_GBN(+)
                       AND E.ENO_NO   = F.ENO_NO(+)
                       AND E.SEQ      = F.SEQ(+)
                    ) A
                 , T_CP_WORKLOG B
                 --정산기준일로 부터 일년전의 기간을 가지고  옴
                 , (SELECT TO_CHAR(ADD_MONTHS(SHR_YMD,-12), 'YYYYMM') AS FROM_YM
                         , TO_CHAR(SHR_YMD, 'YYYYMM') AS TO_YM
                      FROM (SELECT TO_DATE(?) AS SHR_YMD
                              FROM DUAL
                            )
                    ) C
             WHERE A.PIS_YY||A.PIS_MM BETWEEN C.FROM_YM
                                      AND C.TO_YM
               AND A.ENO_NO     = ?
               --상여의 비율이 'N'(미포함) 이 아닌것 과 월차인것 가지고 오기
               AND ((A.SAL_GBN  = '1'
               AND   NVL(B.RET_TAG, 'Y') != 'N')
                OR   A.SAL_GBN  = '4')
               AND A.OCC_CD     = B.OCC_CD
               AND A.PIS_YY     = B.PIS_YY
               AND A.PIS_MM     = B.PIS_MM
               AND A.SAL_GBN    = B.SAL_GBN
               AND A.SEQ        = B.SEQ
            ]]>
        </query>
    </sql>


    <!-- 퇴직자의 상여금 정보를 조회 한다. -->
    <sql name="RETA030_SHR_BONUS_RET">
        <description>퇴직자의 상여금 정보를 조회 '800%'만 가져오면 됨으로  </description>
        <query>
            <![CDATA[
            SELECT ROW_NUMBER() OVER(ORDER BY PIS_YY DESC
                                            , PIS_MM DESC
                                            , SAL_GBN DESC
                                            , SEQ_NO
                                     ) AS NUM
                 , PIS_YY||'-'||PIS_MM AS PIS_YM
                 , SAL_GBN
                 , ENO_NO
                 , NVL(SALT_AMT,0) AS SALT_AMT
                 , NVL(BAS_PCT,0) AS BAS_PCT
                 , PIS_YY
                 , PIS_MM
                 , SEQ
              FROM T_AC_RETBONUS A
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 미사용 휴가 일수를  조회 한다. -->
    <sql name="RETA030_SHR_YEAR_BONUS">
        <description>미사용 휴가 일수를  조회</description>
        <query>
            <![CDATA[
            SELECT NVL((SELECT YRP_CNT      -- 생성연차
                              -AYRP_CNT     -- 작년선연차
                              -(SELECT NVL(SUM(NVL(ATT_H,0)),0)+NVL(SUM(NVL(ATT_Z,0)),0)+NVL(SUM(NVL(ATT_Q,0)),0)
                                      +ROUND((NVL(SUM(NVL(ATT_P,0))+SUM(NVL(ATT_R,0))+SUM(NVL(ATT_V,0)),0)) / 2)
                                  FROM T_DI_DILIGENCE
                                 WHERE PIS_YY = A.PIS_YY
                                   AND ENO_NO = A.ENO_NO
                                ) AS TUN_DD -- 사용연차
                          FROM T_DI_YEARLY A
                         WHERE PIS_YY = ?
                           AND ENO_NO = ?
                        )
                       , 0) AS TUN_DD
              FROM DUAL
            ]]>
        </query>
    </sql>

    <!-- 대상자의 안분 내역을 조회한다. -->
    <sql name="RETA030_SHR_PROPORTIONAL_RET">
        <description>대상자의 안분 내역을 조회</description>
        <query>
            <![CDATA[
            SELECT TO_CHAR(TO_DATE(HIR_YMD, 'YYYY-MM-DD'), 'YYYY/MM/DD') AS HIR_YMD
            	 , TO_CHAR(TO_DATE(RET_YMD, 'YYYY-MM-DD'), 'YYYY/MM/DD') AS RET_YMD
            	 , CO_NM
            	 , NVL(LSE_YY,0) AS LSE_YY
            	 , NVL(LSE_MM,0) AS LSE_MM
            	 , NVL(LSE_DD,0) AS LSE_DD
            	 , NVL(BAS_AMT,0) AS BAS_AMT
            	 , NVL(RET_AMT,0) AS RET_AMT
            	 , NVL(DEB_AMT,0) AS DEB_AMT
            	 , JOB_NM
            	 , TO_CHAR(TO_CHAR(NVL(MUL_VAL, 0)), 'FM00.00') AS MUL_VAL
            	 , SEQ_NO
            	 , ENO_NO
              FROM T_AC_RETPROPORTIONAL
             WHERE ENO_NO = ?
             ORDER BY ENO_NO
                 , RET_YMD DESC
            ]]>
        </query>
    </sql>



    <!-- 기존 등록된 퇴직급여 내역을 가져와 조회한다. -->
    <sql name="RETA030_RET_INFO">
        <description>퇴직급여 내역 조회</description>
        <query>
            <![CDATA[
            SELECT A.ENO_NO
                 , A.SEQ_NO
                 , NVL(A.RTR_AMT  , 0)    AS RTR_AMT      --퇴직금(중도정산금)
                 , NVL(A.ASD_AMT  , 0)    AS ASD_AMT      --퇴직위로금
                 , NVL(A.AVG_AMT  , 0)    AS AVG_AMT      --평균임금
                 , NVL(A.DAY_AVG_AMT  , 0)    AS DAY_AVG_AMT      -- 일평균임금
                 , NVL(A.PAY_DAY  , 0)    AS PAY_DAY      --급여일수조정
                 , NVL(A.BON_AVG  , 0)    AS BON_AVG      --산입액

                 , TO_CHAR(TO_DATE(A.HIRG_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')   AS HIRG_YMD     --시작일
                 , TO_CHAR(TO_DATE(A.RET_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')    AS RET_YMD      --퇴직(중간정산) 일
                 , TO_CHAR(TO_DATE(A.RAM_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')    AS RAM_YMD      --퇴직(중간정산) 기산일

                 , LTRIM(TO_CHAR(A.LSE_YY , '00'))        AS LSE_YY     --근속년수
                 , LTRIM(TO_CHAR(A.LSE_MM , '00'))        AS LSE_MM     --근속월수
                 , LTRIM(TO_CHAR(A.LSE_DD , '00'))        AS LSE_DD     --근속일수
                 , LTRIM(TO_CHAR(A.LSE_PER, '90.000000'))    AS LSE_PER    --근속비율

                 , NVL(A.MNOR_WAG , 0)    AS MNOR_WAG     --월통상임금
                 , NVL(A.TUN_DD   , 0)    AS TUN_DD       --미사용일수
                 , NVL(A.PAY_AMT  , 0)    AS PAY_AMT      --지급액 (연월차수당)
                 , A.YN_TAG                               --산입액 사용여부
                 , DECODE((SELECT COUNT(*) AS CNT
                             FROM T_AC_RETTABLE
                            WHERE ENO_NO = A.ENO_NO
                              AND SEQ    = A.SEQ_NO
                           )
                          , '1'
                          , 'Y'
                          , 'N'
                          ) AS IS_PROC
              FROM T_AC_RETMASTER A
             WHERE A.ENO_NO = ?
               AND A.SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA030_CHK_RETMASTER">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETMASTER
               WHERE ENO_NO = ?
                 AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금 내역을 등록한다. -->
    <sql name="RETA030_INS_RETMASTER">
        <description>퇴직금 내역을 등록</description>
        <query>
            <![CDATA[
              INSERT
                INTO T_AC_RETMASTER
                    (SEQ_NO
                    ,ENO_NO
                    ,OCC_CD
                    ,DPT_CD
                    ,JOB_CD
                    ,PIS_YMD
                    ,JPR_YMD
                    ,JAJ_YMD
                    ,HIRG_YMD
                    ,ZIP1_NO
                    ,ZIP2_NO
                    ,ADDRESS
                    ,RET_YMD
                    ,RAM_YMD
                    ,RTR_AMT
                    ,ASD_AMT
                    ,AVG_AMT
                    ,PAY_DAY
                    ,BON_AVG
                    ,LSE_YY
                    ,LSE_MM
                    ,LSE_DD
                    ,LSE_PER
                    ,MNOR_WAG
                    ,TUN_DD
                    ,PAY_AMT
                    ,HINS_AMT
                    ,IPT_MAN
                    ,UPT_MAN
                    ,DAY_AVG_AMT
                    ,IPT_YMD
                    ,UPT_YMD
                    ,YN_TAG)
              SELECT ?
                    ,ENO_NO
                    ,OCC_CD
                    ,DPT_CD
                    ,JOB_CD
                    ,TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,TO_CHAR(JPR_YMD, 'YYYYMMDD')
                    ,TO_CHAR(JAJ_YMD, 'YYYYMMDD')
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,SUBSTR(ZIP_NO,1,3)
                    ,SUBSTR(ZIP_NO,4,3)
                    ,ADDRESS
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,DECODE(SIGN(TRUNC(? * 0.0045)),-1,0,TRUNC(? * 0.0045))
                    ,?
                    ,?
                    ,?
                    ,SYSDATE
                    ,SYSDATE
                    ,'N'
                FROM T_CM_PERSON
               WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금 내역을 등록 한다. -->
    <sql name="RETA030_UPT_RETMASTER">
        <description>퇴직금 내역을 등록</description>
        <query>
            <![CDATA[
              UPDATE T_AC_RETMASTER
                 SET RET_YMD  = TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,RTR_AMT  = ?
                    ,ASD_AMT  = ?
                    ,AVG_AMT  = ?
                    ,PAY_DAY  = ?
                    ,BON_AVG  = ?
                    ,LSE_YY   = ?
                    ,LSE_MM   = ?
                    ,LSE_DD   = ?
                    ,LSE_PER  = ?
                    ,MNOR_WAG = ?
                    ,TUN_DD   = ?
                    ,PAY_AMT  = ?
                    ,YN_TAG   = ?
                    ,HINS_AMT = DECODE(SIGN(TRUNC(? * 0.0045)),-1,0,TRUNC(? * 0.0045))
                    ,UPT_MAN  = ?
                    ,UPT_YMD  = SYSDATE
               WHERE ENO_NO   = ?
                 AND SEQ_NO   = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직급여여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA030_CHK_RETPAY">
        <description>기존 등록된 퇴직급여여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETPAY
               WHERE ENO_NO = ?
                 AND SEQ_NO = ?
                 AND STR_YMD = ?
            ]]>
        </query>
    </sql>


    <!-- 퇴직급여 내역을 등록 -->
    <sql name="RETA030_INS_RETPAY">
        <description>퇴직급여여 내역을 등록</description>
        <query>
            <![CDATA[
             INSERT
               INTO T_AC_RETPAY
                   (ENO_NO
                   ,SEQ_NO
                   ,STR_YMD
                   ,END_YMD
                   ,BAS_AMT
                   ,BNS_AMT
                   ,LAW_AMT
                   ,DUTY_AMT
                   ,OTH_AMT
                   ,HOL_AMT
                   ,IPT_MAN
                   ,UPT_MAN
                   ,IPT_YMD
                   ,UPT_YMD)
             VALUES(?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,SYSDATE
                   ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직급여 내역을 수정 -->
    <sql name="RETA030_UPT_RETPAY">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETPAY
               SET BAS_AMT  = ?
                  ,BNS_AMT = ?
                  ,LAW_AMT   = ?
                  ,DUTY_AMT  = ?
                  ,OTH_AMT  = ?
                  ,HOL_AMT  = ?
                  ,UPT_MAN  = ?
                  ,UPT_YMD  = SYSDATE
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
               AND STR_YMD = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직상여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA030_CHK_RETBONUS">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETBONUS
               WHERE ENO_NO    = ?
                 AND SEQ_NO    = ?
                 AND SAL_GBN   = ?
                 AND PIS_YY    = ?
                 AND PIS_MM    = ?
                 AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 등록 -->
    <sql name="RETA030_INS_RETBONUS">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETBONUS
                 ( ENO_NO
                 , SEQ_NO
                 , SAL_GBN
                 , PIS_YY
                 , PIS_MM
                 , SEQ
                 , SALT_AMT
                 , BAS_PCT
                 , IPT_MAN
                 , UPT_MAN
                 , IPT_YMD
                 , UPT_YMD)
          VALUES ( ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , SYSDATE
                 , SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 수정 -->
    <sql name="RETA030_UPT_RETBONUS">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETBONUS
               SET SALT_AMT  = ?
                  ,BAS_PCT   = ?
                  ,UPT_MAN   = ?
                  ,UPT_YMD   = SYSDATE
             WHERE ENO_NO    = ?
               AND SEQ_NO    = ?
               AND SAL_GBN   = ?
               AND PIS_YY    = ?
               AND PIS_MM    = ?
               AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 삭제 -->
    <sql name="RETA030_DEL_RETBONUS">
        <description>퇴직급여 내역을 삭제</description>
        <query>
            <![CDATA[
            DELETE T_AC_RETBONUS
             WHERE ENO_NO    = ?
               AND SEQ_NO    = ?
               AND SAL_GBN   = ?
               AND PIS_YY    = ?
               AND PIS_MM    = ?
               AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직상여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA030_CHK_RETPROPORTIONAL">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETPROPORTIONAL
               WHERE ENO_NO   = ?
                 AND SEQ_NO   = ?
                 AND HIR_YMD  = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 등록 -->
    <sql name="RETA030_INS_RETPROPORTIONAL">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETPROPORTIONAL
                   (ENO_NO
                   ,SEQ_NO
                   ,HIR_YMD
                   ,RET_YMD
                   ,CO_NM
                   ,LSE_YY
                   ,LSE_MM
                   ,LSE_DD
                   ,BAS_AMT
                   ,RET_AMT
                   ,DEB_AMT
                   ,JOB_NM
                   ,MUL_VAL
                   ,IPT_MAN
                   ,UPT_MAN
                   ,IPT_YMD
                   ,UPT_YMD)
            VALUES (?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,SYSDATE
                   ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 수정 -->
    <sql name="RETA030_UPT_RETPROPORTIONAL">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETPROPORTIONAL
               SET CO_NM    = ?
                  ,LSE_YY   = ?
                  ,LSE_MM   = ?
                  ,LSE_DD   = ?
                  ,BAS_AMT  = ?
                  ,RET_AMT  = ?
                  ,DEB_AMT  = ?
                  ,JOB_NM   = ?
                  ,MUL_VAL  = ?
                  ,UPT_MAN  = ?
                  ,UPT_YMD  = SYSDATE
             WHERE ENO_NO   = ?
               AND SEQ_NO   = ?
               AND HIR_YMD  = ?
            ]]>
        </query>
    </sql>

    <!-- 사원정보 조회(주민번호,계좌번호,주소) -->
    <sql name="RETA030_SHR_PERSON">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
			SELECT CET_NO
				 , SF_GET_COMMNAME('01', 'BK', ABA_CD) ||' / '|| ACC_NO    ACC_NO
				 , SUBSTR(ZIP_NO,0,3)||'-'||SUBSTR(ZIP_NO,4,3)             ZIP_NO
				 , ADR_CT
				 , ADDRESS
			  FROM T_CM_PERSON
			 WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직전환금 가지고 오기 -->
    <sql name="RETA030_SHR_KUKMIN">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
			SELECT *
                FROM (SELECT Row_Number() OVER(PARTITION BY ENO_NO
                                                   ORDER BY RET_YMD
                                               )      AS NUM
                           , ENO_NO
                           , SEQ_NO
                        FROM T_AC_RETMASTER
                      ) A
       	   -- 국민연금
           LEFT JOIN (SELECT ENO_NO
                           , Min(PIS_YM)      AS STR_YMD
                           , Max(PIS_YM)      AS END_YMD
                           , SUM(RTPL_AMT)    AS CTZ_AMT
                        FROM (SELECT ENO_NO
                                   , PIS_YY||PIS_MM   AS PIS_YM
                                   , RTPL_AMT
                                FROM T_AC_NPN_HISTORY
                               WHERE RTPL_AMT > 0
                              )
                    GROUP BY ENO_NO) C
                  ON A.ENO_NO = C.ENO_NO
               WHERE A.NUM = 1
                 AND A.ENO_NO = ?
                 AND A.SEQ_NO = ?

            ]]>
        </query>
    </sql>

    <!-- 퇴직금 처리 내역 모두 삭제 -->
    <sql name="RETA030_DEL">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
            DECLARE
                in_eno_no   VARCHAR2(10);
                in_seq_no   VARCHAR2(1);
            BEGIN
                --변수 초기화
                in_eno_no := ?;
                in_seq_no := ?;

                -- 모든 퇴직금 처리 내역을 삭제한다.

                --퇴직 마스터 내역 삭제
                DELETE
                  FROM T_AC_RETMASTER
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

                --퇴직 급여 내역 삭제
                DELETE
                  FROM T_AC_RETPAY
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

                --퇴직 상여 내역 삭제
                DELETE
                  FROM T_AC_RETBONUS
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

            END;
            ]]>
        </query>
    </sql>


<!--
***********************************************************************
* @UseCase     : RETA080
* @description : 퇴직금계산처리
***********************************************************************
* 2007/03/26     조정호       최초작성
***********************************************************************
-->

    <!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA080_SHR_PAY">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
              --급여 산정 내역을 조회
              SELECT ROUND(BAS_AMT/LAST_DAY*PAST_DAY    ) AS BAS_AMT    --기본급여
                   , ROUND(DUTY_AMT/LAST_DAY*PAST_DAY   ) AS DUTY_AMT   --직무수당
                   , ROUND(OT_AMT/LAST_DAY*PAST_DAY     ) AS LAW_AMT     --법정수당
                   , ROUND(WEL_AMT/LAST_DAY*PAST_DAY    ) AS BNS_AMT    --상여금
                   , ROUND(MH_AMT/LAST_DAY*PAST_DAY     ) AS MH_AMT     --월차수당
                   --마지막 달의 급여를 계산할때는 기타수당은 일할 계산 하지 않음
                   , DECODE( NUM
                           , 4, OTH_AMT --ROUND(OTH_AMT/LAST_DAY*PAST_DAY)
                           , ROUND(OTH_AMT/LAST_DAY*PAST_DAY)
                             )

                            --휴일 근무 수당을 조회해 옴 보다 정확한 값을 위해 T_DI_HOLIDAYWORK <- 여기에서 조회함
                             AS OTH_AMT                   --기타수당
			, NVL( (SELECT SUM(NVL(HOL_AMT, 0))
                                       FROM T_DI_HOLIDAYWORK
                                      WHERE HOL_YMD
                                    BETWEEN BB.FROM_YMD
                                        AND BB.TO_YMD
                                        AND ENO_NO  = BB.ENO_NO
                                        AND END_TAG = 'Y'
                                     ), 0)  AS HOL_AMT
                   , ROUND(LSEV_AMT/LAST_DAY*PAST_DAY   ) AS LSEV_AMT   --근속수당
                   , PIS_YY                                             --년수
                   , PIS_MM                                             --월수
                   , LAST_DAY                                           --월일수
                   , PAST_DAY                                           --근무일수
                   , WORKING_DATE
                   , FROM_YMD           AS STR_YMD
                   , TO_YMD             AS END_YMD
                FROM (
                      --월별 총 근무 일수, 근무기간등을 가지고 오기
                      SELECT AA.NUM
                           , AA.PIS_YY
                           , AA.PIS_MM
                           , AA.ENO_NO
                           , LAST_DAY
                           , AA.BAS_AMT         --기본급여
                           , AA.DUTY_AMT        --A:직책수당 M:복지수당
                           , AA.OT_AMT          --시간외수당
                           , AA.WEL_AMT         --A:복지수당 M:기술수당
                           , AA.OSE_AMT         --A:자기개발 M:택배수당
                           , AA.RUN_AMT         --A:운행수당
                           , AA.MH_AMT          --M:자기개발
                           , AA.OTH_AMT         --기타수당
                           , AA.LSEV_AMT        --근속수당
                           , DECODE( NUM
                                   , 1       , LAST_DAY - TO_CHAR(FROM_YMD, 'DD') +1
                                   , MONTHS  , TO_CHAR(TO_YMD, 'DD')
                                   , LAST_DAY
                                     ) AS PAST_DAY
                           , DECODE( NUM
                                   , 1       , PIS_YM||'-'||TO_CHAR(FROM_YMD, 'DD')||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                   , MONTHS  , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||TO_CHAR(TO_YMD, 'DD')
                                   , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                     ) AS WORKING_DATE

                           , DECODE( AA.NUM
                                   , 1     , AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.FROM_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||'01'
                                     ) AS FROM_YMD
                           , DECODE( AA.NUM
                                   , MONTHS, AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.TO_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||AA.LAST_DAY
                                     ) AS TO_YMD
                        FROM (
                              --월 마지막날 가지고 오기
                              SELECT ROW_NUMBER() OVER(ORDER BY C.PIS_YY
                                                              , C.PIS_MM
                                                       ) AS NUM
                                   , C.PIS_YY||'-'||C.PIS_MM AS PIS_YM
                                   , C.PIS_YY
                                   , C.PIS_MM
                                   , C.ENO_NO
                                   , C.FROM_YMD
                                   , C.TO_YMD
                                   , C.MONTHS
                                   , TO_CHAR(LAST_DAY(TO_DATE(C.PIS_YY||C.PIS_MM||'01','YYYYMMDD')), 'DD') AS LAST_DAY
                                   , NVL(C.BAS_AMT , D.BAS_AMT)             AS BAS_AMT      --기본급여
                                   , NVL(C.DUTY_AMT, D.DUTY_AMT)            AS DUTY_AMT     --A:직책수당 M:복지수당
                                   , NVL(C.OT_AMT  , D.OT_AMT  )            AS OT_AMT       --시간외수당
                                   , NVL(C.WEL_AMT , D.WEL_AMT )            AS WEL_AMT      --A:복지수당 M:기술수당
                                   , NVL(C.OSE_AMT , D.OSE_AMT )            AS OSE_AMT      --A:자기개발 M:택배수당
                                   , NVL(C.RUN_AMT , D.RUN_AMT )            AS RUN_AMT      --A:운행수당
                                   , NVL(C.MH_AMT  , D.MH_AMT  )            AS MH_AMT       --M:자기개발
                                   , NVL(C.OTH_AMT , D.OTH_AMT )            AS OTH_AMT      --기타수당
                                   , NVL(C.LSEV_AMT, D.LSEV_AMT)            AS LSEV_AMT     --근속수당
                                FROM (
                                      --급여 마스터에서 급여 가지고 오기
                                      SELECT B.ENO_NO
                                           , B.PIS_YY
                                           , B.PIS_MM
                                           , B.FROM_YMD
                                           , B.TO_YMD
                                           , B.MONTHS
                                           , A.BAS_AMT
                                           , A.DUTY_AMT
                                           , A.OT_AMT
                                           , A.WEL_AMT
                                           , A.OSE_AMT
                                           , A.RUN_AMT
                                           , A.MH_AMT
                                           , NVL(A.SGF_AMT, 0)
                                               + NVL(A.TB3_AMT, 0)

                                               --공항근무수당
                                       /*        + NVL((SELECT SUM(DECODE(SAL_CD,'AB',NVL(AMOUNT,0)*DECODE(AD_TAG, 'A', 1, 'D', -1),0))
                                                        FROM T_CP_CHANGE
                                                       WHERE SAL_GBN = '0'
                                                         AND BON_NUM = '1'
                                                         AND ENO_NO = B.ENO_NO
                                                         AND PIS_YY = B.PIS_YY
                                                         AND PIS_MM = B.PIS_MM
                                                      ), 0)  */

                                                    AS OTH_AMT --기타수당

                                           , A.LSEV_AMT
                                        FROM (-- 급여와 소급분을 더해서 가져오기
                                              SELECT E.ENO_NO
                                                   , E.PIS_YY
                                                   , E.PIS_MM
                                                   , NVL(G.BAS_AMT  , 0) + NVL(F.BAS_AMT  , 0) AS BAS_AMT
                                                   , NVL(G.DUTY_AMT , 0) + NVL(F.DUTY_AMT , 0) AS DUTY_AMT
                                                   , NVL(G.LAW_AMT   , 0)  AS OT_AMT
                                                   , NVL(G.BNS_AMT  , 0)  AS WEL_AMT
                                                   , NVL(E.OSE_AMT  , 0) + NVL(F.OSE_AMT  , 0) AS OSE_AMT
                                                   , NVL(E.RUN_AMT  , 0) + NVL(F.RUN_AMT  , 0) AS RUN_AMT
                                                   , NVL(E.ETC_AMT   , 0) + NVL(F.MH_AMT   , 0) AS MH_AMT
                                                   , NVL(E.SGF_AMT  , 0) + NVL(F.SGF_AMT  , 0) AS SGF_AMT
                                                   , NVL(E.TB3_AMT  , 0) + NVL(F.TB3_AMT  , 0) AS TB3_AMT
                                                   , NVL(E.LSEV_AMT , 0) + NVL(F.LSEV_AMT , 0) AS LSEV_AMT
                                                FROM T_CP_PAYMASTER E   -- 급여 MASTER
                                                   , T_CP_ADDPAY F      -- 소급 테이블
                                                   , T_CP_PAYTABLE G    -- 연봉테이블
                                               WHERE E.SAL_GBN  = '0'
                                                 AND E.ENO_NO = ?
                                                 AND E.ENO_NO = SUBSTR(G.HOB_CD, 5,6)
                                                 AND G.STR_YMD <= TO_CHAR(SYSDATE, 'YYYYMMDD')
                                                 AND NVL(G.END_YMD, '99991231') >= ?
                                                 AND E.OCC_CD   = F.OCC_CD(+)
                                                 AND E.PIS_YY   = F.PIS_YY(+)
                                                 AND E.PIS_MM   = F.PIS_MM(+)
                                                 AND E.SAL_GBN  = F.SAL_GBN(+)
                                                 AND E.ENO_NO   = F.ENO_NO(+)
                                                 AND E.SEQ      = F.SEQ(+)
                                              ) A
                                           --날짜값 비교를 위해 더미 TABLE (근무 월을 가지고 오기)
                                           , (SELECT N.*
                                                FROM (SELECT NUM
                                                           , L.FROM_YMD
                                                           , L.TO_YMD
                                                           , L.MONTHS
                                                           , L.ENO_NO
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'YYYY')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'YYYY')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'YYYY')
                                                             WHEN M.NUM = 4 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'YYYY')
                                                              END AS PIS_YY
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'MM')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'MM')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'MM')
                                                             WHEN M.NUM = 4
                                                              AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'MM')
                                                              END AS PIS_MM
                                                        FROM (SELECT CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN ADD_MONTHS(TO_DATE(TO_CHAR(SCH_YMD,'YYYYMM')||'01'),-2)
                                                                     ELSE ADD_MONTHS(SCH_YMD,-3)+1
                                                                      END AS FROM_YMD
                                                                   , SCH_YMD AS TO_YMD
                                                                   , CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN 3
                                                                     ELSE 4
                                                                      END AS MONTHS
                                                                   , ENO_NO
                                                                   , SCH_YMD                AS MON1
                                                                   , ADD_MONTHS(SCH_YMD,-1) AS MON2
                                                                   , ADD_MONTHS(SCH_YMD,-2) AS MON3
                                                                   , ADD_MONTHS(SCH_YMD,-3) AS MON4
                                                                FROM (SELECT TO_DATE(?, 'YYYY-MM-DD') AS SCH_YMD
                                                                           , ? AS ENO_NO
                                                                        FROM DUAL)
                                                              ) L
                                                           , (SELECT 1 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 2 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 3 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 4 AS NUM
                                                                FROM DUAL
                                                              ) M
                                                      ) N
                                               WHERE MONTHS-NUM >= 0
                                              ) B
                                       WHERE B.ENO_NO = A.ENO_NO(+)
                                         AND B.PIS_YY = A.PIS_YY(+)
                                         AND B.PIS_MM = LPAD(A.PIS_MM(+),2,'0')
                                      ) C
                                   --급여 테이블에서 해당 직급의 급여 항목을 가져오기 (급여 마스터에서 급여 항목이 없을 경우를 대비해)
                                   , (SELECT O.*
                                        FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.APY_YMD DESC) AS NUM
                                                   , H.*
                                                   , CASE
                                                     WHEN J.LSEV_AMT > 100000
                                                     THEN 100000
                                                     ELSE J.LSEV_AMT
                                                      END AS LSEV_AMT
                                                   , 0 AS OTH_AMT
                                                FROM T_CP_PAYTABLE H
                                                   , T_CM_PERSON I
                                                   --근속수당 계산해 오기
                                    	           , (SELECT CASE
                                    	                     WHEN LSEV_YY >= 4
                                                             THEN 20000 + TRUNC((LSEV_YY-4)/2) * 10000
                                                             ELSE 0
                                                              END AS LSEV_AMT
                                                        FROM (SELECT TRUNC(MONTHS_BETWEEN(TO_DATE(?, 'YYYY-MM-DD'), NVL(HIRG_YMD, HIR_YMD) )/12) AS LSEV_YY
                                                                FROM T_CM_PERSON
                                                               WHERE ENO_NO = ?)
                                                      ) J
                                               WHERE I.ENO_NO = ?
                                                 AND H.JOB_CD = NVL((SELECT J.GBN2_TAG
                                                                       FROM T_CM_COMMON J
                                                                      WHERE J.CD_GBN = 'A2'
                                                                        AND J.COMM_CD = I.JOB_CD), I.JOB_CD)
                                                 AND H.OCC_CD = I.OCC_CD
                                              ) O
                                       WHERE O.NUM = 1
        							  ) D
                              )AA
                      ) BB
            ORDER BY PIS_YY
                   , PIS_MM
            ]]>
        </query>
    </sql>

	<!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA080_SHR_PAY2">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
			SELECT
				SUM(BAS_AMT)+ SUM(ETC_AMT) AS BAS_AMT
			   FROM T_CP_PAYMASTER
			 WHERE PIS_YY = SUBSTR(?,0,4)
				  AND ENO_NO = ?
				  AND PIS_MM <= SUBSTR(?,4,2)
            ]]>
        </query>
    </sql>


    <!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA080_SHR_PAY_RET">
        <description>퇴직금 산정 내역  조회</description>
        <query>
            <![CDATA[
            SELECT STR_YMD
                 , END_YMD
                 , END_YMD - STR_YMD + 1                                AS PAST_DAY
                 , TO_CHAR(TO_DATE(STR_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')
                    ||CHR(13)||CHR(10)
                    ||TO_CHAR(TO_DATE(END_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS WORKING_DATE
                 , BAS_AMT
                 , BNS_AMT
                 , LAW_AMT
                 , DUTY_AMT
                 , OTH_AMT
                 , HOL_AMT
                 , LSE_AMT AS LSEV_AMT
              FROM T_AC_RETPAY PAY
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 신청내역의 상여금 정보를 조회 한다. -->
    <sql name="RETA080_SHR_BONUS">
        <description>신청내역의 상여금 정보를 조회</description>
        <query>
            <![CDATA[
            SELECT ROW_NUMBER() OVER(ORDER BY A.PIS_YY DESC
                                            , A.PIS_MM DESC
                                            , A.SAL_GBN DESC
                                            , A.SEQ) AS NUM
                 , A.PIS_YY||'-'||A.PIS_MM AS PIS_YM
                 , A.SAL_GBN
                 , A.ENO_NO
                 , NVL(A.SALT_AMT,0)        AS SALT_AMT     -- 상여금
                 --, NVL(A.BAS_PCT,0)         AS BAS_PCT      -- 상여금의 비율
                 , NVL(B.BPAY_PCT, 0)       AS BAS_PCT     -- WORKLOG의 비율을 가져가야 함
                 , A.PIS_YY
                 , A.PIS_MM
                 , A.SEQ
              FROM (SELECT E.OCC_CD
                         , E.PIS_YY
                         , E.PIS_MM
                         , E.SAL_GBN
                         , E.ENO_NO
                         , E.SEQ
                         , NVL(E.SALT_AMT  , 0) + NVL(F.SALT_AMT  , 0) AS SALT_AMT
                         , E.BAS_PCT
                      FROM T_CP_PAYMASTER E   -- 상여 MASTER
                         , T_CP_ADDPAY F      -- 소급 테이블
                     WHERE E.SAL_GBN  IN ('1', '4')
                       AND E.OCC_CD   = F.OCC_CD(+)
                       AND E.PIS_YY   = F.PIS_YY(+)
                       AND E.PIS_MM   = F.PIS_MM(+)
                       AND E.SAL_GBN  = F.SAL_GBN(+)
                       AND E.ENO_NO   = F.ENO_NO(+)
                       AND E.SEQ      = F.SEQ(+)
                    ) A
                 , T_CP_WORKLOG B
                 --정산기준일로 부터 일년전의 기간을 가지고  옴
                 , (SELECT TO_CHAR(ADD_MONTHS(SHR_YMD,-12), 'YYYYMM') AS FROM_YM
                         , TO_CHAR(SHR_YMD, 'YYYYMM') AS TO_YM
                      FROM (SELECT TO_DATE(?) AS SHR_YMD
                              FROM DUAL
                            )
                    ) C
             WHERE A.PIS_YY||A.PIS_MM BETWEEN C.FROM_YM
                                      AND C.TO_YM
               AND A.ENO_NO     = ?
               --상여의 비율이 'N'(미포함) 이 아닌것 과 월차인것 가지고 오기
               AND ((A.SAL_GBN  = '1'
               AND   NVL(B.RET_TAG, 'Y') != 'N')
                OR   A.SAL_GBN  = '4')
               AND A.OCC_CD     = B.OCC_CD
               AND A.PIS_YY     = B.PIS_YY
               AND A.PIS_MM     = B.PIS_MM
               AND A.SAL_GBN    = B.SAL_GBN
               AND A.SEQ        = B.SEQ
            ]]>
        </query>
    </sql>


    <!-- 퇴직자의 상여금 정보를 조회 한다. -->
    <sql name="RETA080_SHR_BONUS_RET">
        <description>퇴직자의 상여금 정보를 조회 '800%'만 가져오면 됨으로  </description>
        <query>
            <![CDATA[
            SELECT ROW_NUMBER() OVER(ORDER BY PIS_YY DESC
                                            , PIS_MM DESC
                                            , SAL_GBN DESC
                                            , SEQ_NO
                                     ) AS NUM
                 , PIS_YY||'-'||PIS_MM AS PIS_YM
                 , SAL_GBN
                 , ENO_NO
                 , NVL(SALT_AMT,0) AS SALT_AMT
                 , NVL(BAS_PCT,0) AS BAS_PCT
                 , PIS_YY
                 , PIS_MM
                 , SEQ
              FROM T_AC_RETBONUS A
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 미사용 휴가 일수를  조회 한다. -->
    <sql name="RETA080_SHR_YEAR_BONUS">
        <description>미사용 휴가 일수를  조회</description>
        <query>
            <![CDATA[
            SELECT NVL((SELECT YRP_CNT      -- 생성연차
                              -AYRP_CNT     -- 작년선연차
                              -(SELECT NVL(SUM(NVL(ATT_H,0)),0)+NVL(SUM(NVL(ATT_Z,0)),0)+NVL(SUM(NVL(ATT_Q,0)),0)
                                      +ROUND((NVL(SUM(NVL(ATT_P,0))+SUM(NVL(ATT_R,0))+SUM(NVL(ATT_V,0)),0)) / 2)
                                  FROM T_DI_DILIGENCE
                                 WHERE PIS_YY = A.PIS_YY
                                   AND ENO_NO = A.ENO_NO
                                ) AS TUN_DD -- 사용연차
                          FROM T_DI_YEARLY A
                         WHERE PIS_YY = ?
                           AND ENO_NO = ?
                        )
                       , 0) AS TUN_DD
              FROM DUAL
            ]]>
        </query>
    </sql>

    <!-- 대상자의 안분 내역을 조회한다. -->
    <sql name="RETA080_SHR_PROPORTIONAL_RET">
        <description>대상자의 안분 내역을 조회</description>
        <query>
            <![CDATA[
            SELECT TO_CHAR(TO_DATE(HIR_YMD, 'YYYY-MM-DD'), 'YYYY/MM/DD') AS HIR_YMD
            	 , TO_CHAR(TO_DATE(RET_YMD, 'YYYY-MM-DD'), 'YYYY/MM/DD') AS RET_YMD
            	 , CO_NM
            	 , NVL(LSE_YY,0) AS LSE_YY
            	 , NVL(LSE_MM,0) AS LSE_MM
            	 , NVL(LSE_DD,0) AS LSE_DD
            	 , NVL(BAS_AMT,0) AS BAS_AMT
            	 , NVL(RET_AMT,0) AS RET_AMT
            	 , NVL(DEB_AMT,0) AS DEB_AMT
            	 , JOB_NM
            	 , TO_CHAR(TO_CHAR(NVL(MUL_VAL, 0)), 'FM00.00') AS MUL_VAL
            	 , SEQ_NO
            	 , ENO_NO
              FROM T_AC_RETPROPORTIONAL
             WHERE ENO_NO = ?
             ORDER BY ENO_NO
                 , RET_YMD DESC
            ]]>
        </query>
    </sql>



    <!-- 기존 등록된 퇴직급여 내역을 가져와 조회한다. -->
    <sql name="RETA080_RET_INFO">
        <description>퇴직급여 내역 조회</description>
        <query>
            <![CDATA[
            SELECT A.ENO_NO
                 , A.SEQ_NO
                 , NVL(A.RTR_AMT  , 0)    AS RTR_AMT      --퇴직금(중도정산금)
                 , NVL(A.ASD_AMT  , 0)    AS ASD_AMT      --퇴직위로금
                 , NVL(A.AVG_AMT  , 0)    AS AVG_AMT      --평균임금
                 , NVL(A.DAY_AVG_AMT  , 0)    AS DAY_AVG_AMT      -- 일평균임금
                 , NVL(A.PAY_DAY  , 0)    AS PAY_DAY      --급여일수조정
                 , NVL(A.BON_AVG  , 0)    AS BON_AVG      --산입액

                 , TO_CHAR(TO_DATE(A.HIRG_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')   AS HIRG_YMD     --시작일
                 , TO_CHAR(TO_DATE(A.RET_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')    AS RET_YMD      --퇴직(중간정산) 일
                 , TO_CHAR(TO_DATE(A.RAM_YMD, 'YYYYMMDD'), 'YYYY-MM-DD')    AS RAM_YMD      --퇴직(중간정산) 기산일

                 , LTRIM(TO_CHAR(A.LSE_YY , '00'))        AS LSE_YY     --근속년수
                 , LTRIM(TO_CHAR(A.LSE_MM , '00'))        AS LSE_MM     --근속월수
                 , LTRIM(TO_CHAR(A.LSE_DD , '00'))        AS LSE_DD     --근속일수
                 , LTRIM(TO_CHAR(A.LSE_PER, '90.000000'))    AS LSE_PER    --근속비율

                 , NVL(A.MNOR_WAG , 0)    AS MNOR_WAG     --월통상임금
                 , NVL(A.TUN_DD   , 0)    AS TUN_DD       --미사용일수
                 , NVL(A.PAY_AMT  , 0)    AS PAY_AMT      --지급액 (연월차수당)
                 , A.YN_TAG                               --산입액 사용여부
                 , DECODE((SELECT COUNT(*) AS CNT
                             FROM T_AC_RETTABLE
                            WHERE ENO_NO = A.ENO_NO
                              AND SEQ    = A.SEQ_NO
                           )
                          , '1'
                          , 'Y'
                          , 'N'
                          ) AS IS_PROC
              FROM T_AC_RETMASTER A
             WHERE A.ENO_NO = ?
               AND A.SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA080_CHK_RETMASTER">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETMASTER
               WHERE ENO_NO = ?
                 AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금 내역을 등록한다. -->
    <sql name="RETA080_INS_RETMASTER">
        <description>퇴직금 내역을 등록</description>
        <query>
            <![CDATA[
              INSERT
                INTO T_AC_RETMASTER
                    (SEQ_NO
                    ,ENO_NO
                    ,OCC_CD
                    ,DPT_CD
                    ,JOB_CD
                    ,PIS_YMD
                    ,JPR_YMD
                    ,JAJ_YMD
                    ,HIRG_YMD
                    ,ZIP1_NO
                    ,ZIP2_NO
                    ,ADDRESS
                    ,RET_YMD
                    ,RAM_YMD
                    ,RTR_AMT
                    ,ASD_AMT
                    ,AVG_AMT
                    ,PAY_DAY
                    ,BON_AVG
                    ,LSE_YY
                    ,LSE_MM
                    ,LSE_DD
                    ,LSE_PER
                    ,MNOR_WAG
                    ,TUN_DD
                    ,PAY_AMT
                    ,HINS_AMT
                    ,IPT_MAN
                    ,UPT_MAN
                    ,DAY_AVG_AMT
                    ,IPT_YMD
                    ,UPT_YMD
                    ,YN_TAG)
              SELECT ?
                    ,ENO_NO
                    ,OCC_CD
                    ,DPT_CD
                    ,JOB_CD
                    ,TO_CHAR(SYSDATE, 'YYYYMMDD')
                    ,TO_CHAR(JPR_YMD, 'YYYYMMDD')
                    ,TO_CHAR(JAJ_YMD, 'YYYYMMDD')
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,SUBSTR(ZIP_NO,1,3)
                    ,SUBSTR(ZIP_NO,4,3)
                    ,ADDRESS
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,DECODE(SIGN(TRUNC(? * 0.0045)),-1,0,TRUNC(? * 0.0045))
                    ,?
                    ,?
                    ,?
                    ,SYSDATE
                    ,SYSDATE
                    ,'N'
                FROM T_CM_PERSON
               WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직금 내역을 등록 한다. -->
    <sql name="RETA080_UPT_RETMASTER">
        <description>퇴직금 내역을 등록</description>
        <query>
            <![CDATA[
              UPDATE T_AC_RETMASTER
                 SET RET_YMD  = TO_CHAR(TO_DATE(?), 'YYYYMMDD')
                    ,RTR_AMT  = ?
                    ,ASD_AMT  = ?
                    ,AVG_AMT  = ?
                    ,PAY_DAY  = ?
                    ,BON_AVG  = ?
                    ,LSE_YY   = ?
                    ,LSE_MM   = ?
                    ,LSE_DD   = ?
                    ,LSE_PER  = ?
                    ,MNOR_WAG = ?
                    ,TUN_DD   = ?
                    ,PAY_AMT  = ?
                    ,YN_TAG   = ?
                    ,HINS_AMT = DECODE(SIGN(TRUNC(? * 0.0045)),-1,0,TRUNC(? * 0.0045))
                    ,UPT_MAN  = ?
                    ,UPT_YMD  = SYSDATE
               WHERE ENO_NO   = ?
                 AND SEQ_NO   = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직급여여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA080_CHK_RETPAY">
        <description>기존 등록된 퇴직급여여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETPAY
               WHERE ENO_NO = ?
                 AND SEQ_NO = ?
                 AND STR_YMD = ?
            ]]>
        </query>
    </sql>


    <!-- 퇴직급여 내역을 등록 -->
    <sql name="RETA080_INS_RETPAY">
        <description>퇴직급여여 내역을 등록</description>
        <query>
            <![CDATA[
             INSERT
               INTO T_AC_RETPAY
                   (ENO_NO
                   ,SEQ_NO
                   ,STR_YMD
                   ,END_YMD
                   ,BAS_AMT
                   ,BNS_AMT
                   ,LAW_AMT
                   ,DUTY_AMT
                   ,OTH_AMT
                   ,IPT_MAN
                   ,UPT_MAN
                   ,IPT_YMD
                   ,UPT_YMD)
             VALUES(?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,SYSDATE
                   ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직급여 내역을 수정 -->
    <sql name="RETA080_UPT_RETPAY">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETPAY
               SET BAS_AMT  = ?
                  ,BNS_AMT = ?
                  ,LAW_AMT   = ?
                  ,DUTY_AMT  = ?
                  ,OTH_AMT  = ?
                  ,UPT_MAN  = ?
                  ,UPT_YMD  = SYSDATE
             WHERE ENO_NO = ?
               AND SEQ_NO = ?
               AND STR_YMD = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직상여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA080_CHK_RETBONUS">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETBONUS
               WHERE ENO_NO    = ?
                 AND SEQ_NO    = ?
                 AND SAL_GBN   = ?
                 AND PIS_YY    = ?
                 AND PIS_MM    = ?
                 AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 등록 -->
    <sql name="RETA080_INS_RETBONUS">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETBONUS
                 ( ENO_NO
                 , SEQ_NO
                 , SAL_GBN
                 , PIS_YY
                 , PIS_MM
                 , SEQ
                 , SALT_AMT
                 , BAS_PCT
                 , IPT_MAN
                 , UPT_MAN
                 , IPT_YMD
                 , UPT_YMD)
          VALUES ( ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , SYSDATE
                 , SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 수정 -->
    <sql name="RETA080_UPT_RETBONUS">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETBONUS
               SET SALT_AMT  = ?
                  ,BAS_PCT   = ?
                  ,UPT_MAN   = ?
                  ,UPT_YMD   = SYSDATE
             WHERE ENO_NO    = ?
               AND SEQ_NO    = ?
               AND SAL_GBN   = ?
               AND PIS_YY    = ?
               AND PIS_MM    = ?
               AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 삭제 -->
    <sql name="RETA080_DEL_RETBONUS">
        <description>퇴직급여 내역을 삭제</description>
        <query>
            <![CDATA[
            DELETE T_AC_RETBONUS
             WHERE ENO_NO    = ?
               AND SEQ_NO    = ?
               AND SAL_GBN   = ?
               AND PIS_YY    = ?
               AND PIS_MM    = ?
               AND SEQ       = ?
            ]]>
        </query>
    </sql>

    <!-- 기존 등록된 퇴직상여 내역이 등록되어 있는지 여부를 검사한다. -->
    <sql name="RETA080_CHK_RETPROPORTIONAL">
        <description>기존 등록된 퇴직급여 내역이 등록되어 있는지 여부를 검사</description>
        <query>
            <![CDATA[
              SELECT COUNT(*) AS CNT
                FROM T_AC_RETPROPORTIONAL
               WHERE ENO_NO   = ?
                 AND SEQ_NO   = ?
                 AND HIR_YMD  = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 등록 -->
    <sql name="RETA080_INS_RETPROPORTIONAL">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETPROPORTIONAL
                   (ENO_NO
                   ,SEQ_NO
                   ,HIR_YMD
                   ,RET_YMD
                   ,CO_NM
                   ,LSE_YY
                   ,LSE_MM
                   ,LSE_DD
                   ,BAS_AMT
                   ,RET_AMT
                   ,DEB_AMT
                   ,JOB_NM
                   ,MUL_VAL
                   ,IPT_MAN
                   ,UPT_MAN
                   ,IPT_YMD
                   ,UPT_YMD)
            VALUES (?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,SYSDATE
                   ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직상여 내역을 수정 -->
    <sql name="RETA080_UPT_RETPROPORTIONAL">
        <description>퇴직급여 내역을 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETPROPORTIONAL
               SET CO_NM    = ?
                  ,LSE_YY   = ?
                  ,LSE_MM   = ?
                  ,LSE_DD   = ?
                  ,BAS_AMT  = ?
                  ,RET_AMT  = ?
                  ,DEB_AMT  = ?
                  ,JOB_NM   = ?
                  ,MUL_VAL  = ?
                  ,UPT_MAN  = ?
                  ,UPT_YMD  = SYSDATE
             WHERE ENO_NO   = ?
               AND SEQ_NO   = ?
               AND HIR_YMD  = ?
            ]]>
        </query>
    </sql>

    <!-- 사원정보 조회(주민번호,계좌번호,주소) -->
    <sql name="RETA080_SHR_PERSON">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
			SELECT CET_NO
				 , SF_GET_COMMNAME('01', 'BK', ABA_CD) ||' / '|| ACC_NO    ACC_NO
				 , SUBSTR(ZIP_NO,0,3)||'-'||SUBSTR(ZIP_NO,4,3)             ZIP_NO
				 , ADR_CT
				 , ADDRESS
			  FROM T_CM_PERSON
			 WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직전환금 가지고 오기 -->
    <sql name="RETA080_SHR_KUKMIN">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
			SELECT *
                FROM (SELECT Row_Number() OVER(PARTITION BY ENO_NO
                                                   ORDER BY RET_YMD
                                               )      AS NUM
                           , ENO_NO
                           , SEQ_NO
                        FROM T_AC_RETMASTER
                      ) A
       	   -- 국민연금
           LEFT JOIN (SELECT ENO_NO
                           , Min(PIS_YM)      AS STR_YMD
                           , Max(PIS_YM)      AS END_YMD
                           , SUM(RTPL_AMT)    AS CTZ_AMT
                        FROM (SELECT ENO_NO
                                   , PIS_YY||PIS_MM   AS PIS_YM
                                   , RTPL_AMT
                                FROM T_AC_NPN_HISTORY
                               WHERE RTPL_AMT > 0
                              )
                    GROUP BY ENO_NO) C
                  ON A.ENO_NO = C.ENO_NO
               WHERE A.NUM = 1
                 AND A.ENO_NO = ?
                 AND A.SEQ_NO = ?

            ]]>
        </query>
    </sql>

    <!-- 퇴직금 처리 내역 모두 삭제 -->
    <sql name="RETA080_DEL">
        <description>사원정보 조회</description>
        <query>
            <![CDATA[
            DECLARE
                in_eno_no   VARCHAR2(10);
                in_seq_no   VARCHAR2(1);
            BEGIN
                --변수 초기화
                in_eno_no := ?;
                in_seq_no := ?;

                -- 모든 퇴직금 처리 내역을 삭제한다.

                --퇴직 마스터 내역 삭제
                DELETE
                  FROM T_AC_RETMASTER
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

                --퇴직 급여 내역 삭제
                DELETE
                  FROM T_AC_RETPAY
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

                --퇴직 상여 내역 삭제
                DELETE
                  FROM T_AC_RETBONUS
                 WHERE ENO_NO   = in_eno_no
                   AND SEQ_NO   = in_seq_no;

            END;
            ]]>
        </query>
    </sql>



<!--
***********************************************************************
* @UseCase     : RETA031
* @description : 퇴직금안분내역
***********************************************************************
* 2007/07/11     조정호       최초작성
***********************************************************************
-->
    <!-- 대상자의 안분 내역을 조회한다. -->
    <sql name="RETA031_SHR">
        <description>대상자의 안분 내역을 조회</description>
        <query>
            <![CDATA[
            SELECT TO_CHAR(TO_DATE(HIR_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS HIR_YMD
                 , TO_CHAR(TO_DATE(RET_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS RET_YMD
                 , CO_NM
                 , NVL(LSE_YY,0)    AS LSE_YY
                 , NVL(LSE_MM,0)    AS LSE_MM
                 , NVL(LSE_DD,0)    AS LSE_DD
                 , NVL(BAS_AMT,0)   AS BAS_AMT
                 , NVL(RET_AMT,0)   AS RET_AMT
                 , NVL(DEB_AMT,0)   AS DEB_AMT
                 , JOB_NM
                 , TO_CHAR(TO_CHAR(NVL(MUL_VAL, 0)), 'FM00.00') AS MUL_VAL
                 , SEQ_NO
                 , ENO_NO
                 , 0 AS RET_DIV
              FROM T_AC_RETPROPORTIONAL
             WHERE ENO_NO   = ?
               AND HIR_YMD  = ?
               AND SEQ_NO   = ?
          ORDER BY ENO_NO
                 , RET_YMD DESC
            ]]>
        </query>
    </sql>

    <!-- 대상자의 안분 내역을 등록한다. -->
    <sql name="RETA031_INS">
        <description>대상자의 안분 내역을 등록한다.</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETPROPORTIONAL
                 ( ENO_NO
                 , HIR_YMD
                 , RET_YMD
                 , CO_NM
                 , LSE_YY
                 , LSE_MM
                 , LSE_DD
                 , BAS_AMT
                 , RET_AMT
                 , DEB_AMT
                 , JOB_NM
                 , MUL_VAL
                 , SEQ_NO
                 , IPT_MAN
                 , IPT_YMD
                 , UPT_MAN
                 , UPT_YMD )
          VALUES ( ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , SYSDATE
                 , ?
                 , SYSDATE )
            ]]>
        </query>
    </sql>

    <!-- 대상자의 안분 내역을 수정한다. -->
    <sql name="RETA031_UPT">
        <description>대상자의 안분 내역을 수정한다.</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETPROPORTIONAL
               SET RET_YMD  = ?
                 , CO_NM    = ?
                 , LSE_YY   = ?
                 , LSE_MM   = ?
                 , LSE_DD   = ?
                 , BAS_AMT  = ?
                 , RET_AMT  = ?
                 , DEB_AMT  = ?
                 , JOB_NM   = ?
                 , MUL_VAL  = ?
                 , UPT_MAN  = ?
                 , UPT_YMD  = SYSDATE
             WHERE ENO_NO   = ?
               AND HIR_YMD  = ?
               AND SEQ_NO   = ?
            ]]>
        </query>
    </sql>

    <!-- 대상자의 안분 내역을 삭제한다. -->
    <sql name="RETA031_DEL">
        <description>대상자의 안분 내역을 삭제한다.</description>
        <query>
            <![CDATA[
            DELETE
              FROM T_AC_RETPROPORTIONAL
             WHERE ENO_NO   = ?
               AND HIR_YMD  = ?
               AND SEQ_NO   = ?
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETA040
* @description : 퇴직금현황
***********************************************************************
* 2007/03/06     조정호       최초작성
* 2007/04/13     김학수       인쇄부분추가
***********************************************************************
-->
    <!-- 퇴직현황 내역을 조회 -->
    <sql name="RETA040_SHR">
        <description>퇴직현황 내역을 조회</description>
        <query>
            <![CDATA[
            SELECT SF_GET_DPTNAME(  '01', 'A4', A.DPT_CD) AS DPT_NM
                 , SF_GET_COMMNAME( '01', 'A2', A.JOB_CD) AS JOB_NM
                 , A.SEQ_NO
                 , A.ENO_NO
                 , SF_GET_ENONAME('01', A.ENO_NO)   AS ENO_NM
                 , TO_CHAR(TO_DATE(HIRG_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS HIRG_YMD
                 , TO_CHAR(TO_DATE(RET_YMD, 'YYYYMMDD') , 'YYYY-MM-DD') AS RET_YMD
                 , NVL(A.RTR_AMT, 0)+NVL(A.ASD_AMT, 0)  AS RTR_AMT
                 , NVL(A.PAY_AMT, 0)                    AS PAY_AMT
                 , NVL(A.HINS_AMT,0)                    AS HINS_AMT
                 , A.WRK_NO1
                 , DECODE(B.RET_GBN, 'NW', '미가입', B.RET_GBN)     AS RET_GBN
              FROM T_AC_RETMASTER A,
                        T_CP_RETMASTER B
             WHERE A.OCC_CD     LIKE '%'||?||'%'
               AND TO_CHAR(TO_DATE(A.RAM_YMD, 'YYYYMMDD'), 'YYYYMM') = ?
               AND A.ENO_NO = B.ENO_NO(+)
          ORDER BY DECODE(?
                 , '1'
                 , SF_GET_DPTSEQ( '01', 'A4', A.DPT_CD)
                 , SF_GET_COMMSEQ('01', 'A2', A.JOB_CD)
                   )
            ]]>
        </query>
    </sql>

    <!-- 전표처리를 위해 시퀀스 번호를 가지고 온다. -->
    <sql name="RETA040_SHR_SEQ">
        <description>전표처리를 위해 시퀀스 번호를 가지고 온다.</description>
        <query>
            <![CDATA[
            SELECT S_TACTSLP_WRK_NO1.NEXTVAL AS WRK_NO1
              FROM DUAL
            ]]>
        </query>
    </sql>


    <!-- 전표처리를 위해 값을 조회해 온다. -->
    <sql name="RETA040_SHR_CHIT">
        <description>전표처리를 위해 값을 조회해 온다.</description>
        <query>
            <![CDATA[
             SELECT A.ENO_NO
                  , SF_GET_ENONAME('01',A.ENO_NO)           AS ENO_NM
                  , A.OCC_CD
                  , TO_CHAR(TO_DATE(A.HIRG_YMD),'YYYY.MM.DD') AS HIRG_YMD
                  , TO_CHAR(TO_DATE(A.RET_YMD),'YYYY.MM.DD')  AS RET_YMD
                  , NVL(A.RTR_AMT, 0) + NVL(A.ASD_AMT, 0)     AS RTR_AMT      --퇴직금
                  , NVL(A.PAY_AMT, 0)                         AS PAY_AMT      --지급금액
                  , NVL(D.ICM_TAX, 0)                         AS ICM_TAX      --소득세
                  , NVL(D.DJM_TAX, 0)                         AS DJM_TAX      --주민세
                  , NVL(A.HINS_AMT,0)                         AS HINS_AMT     --고용보험
                  , CASE
                    WHEN (SELECT COUNT(*)
                            FROM T_AC_RETMASTER
                           WHERE ENO_NO = A.ENO_NO
                             AND WRK_NO1 IS NOT NULL) > 0
                    THEN 0
                    ELSE NVL(C.CTZ_AMT,0)
                     END AS CTZ_AMT
                  , A.JOB_CD
                  , SF_GET_COMMNAME('01','A2',A.JOB_CD)     AS JOB_NM
                  , B.DPT_CD
                  , B.DPT_NM
                  , B.HEAD_CD
                  , A.SEQ_NO
               FROM T_AC_RETMASTER A
         INNER JOIN T_CM_DEPT B
                 ON A.DPT_CD    = B.DPT_CD
                AND B.CD_GBN    = 'A4'
                -- 국민연금
          LEFT JOIN (SELECT ENO_NO
                           ,NVL(SUM(RTPL_AMT),0) AS CTZ_AMT
                       FROM T_AC_NPN_HISTORY
                   GROUP BY ENO_NO) C
                 ON A.ENO_NO    = C.ENO_NO
                -- 퇴직금 소득 정산내역
          LEFT JOIN T_AC_RETTABLE D
                 ON A.ENO_NO    = D.ENO_NO
                AND A.SEQ_NO    = D.SEQ
              WHERE A.ENO_NO    = ?
                AND A.SEQ_NO    = ?
            ]]>
        </query>
    </sql>



    <!-- 전표처리 내역을 등록 한다. -->
    <sql name="RETA040_INS">
        <description>전표처리 내역을 등록 한다.</description>
        <query>
            <![CDATA[
            INSERT
              INTO tactslp
                 ( ACC_UNIT
                 , WRK_NO1
                 , WRK_NO2
                 , ACC_YY
                 , ACC_MM
                 , DPT_CD
                 , ACC_CD
                 , ITM_CD
                 , DET_CD
                 , CD_TAG
                 , WON_AMT
                 , DESC1
                 , TAX_YMD
                 , TAX_AMT
                 , SPL_PRC
                 , CONT_AMT
                 , SLP_TAG
                 , SLP_IPT
                 , ADV_TAG
                 , IPT_MAN
                 , IPT_YMD)
          VALUES ( 'A'
                 , ?
                 , ?
                 , TO_CHAR(SYSDATE, 'YYYY')
                 , TO_CHAR(SYSDATE, 'MM')
                 , 'SPGA'
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , TO_CHAR(SYSDATE, 'YYYYMMDD')
                 , 0
                 , 0
                 , 0
                 , ?
                 , ?
                 , '2'
                 , ?
                 , TO_CHAR(SYSDATE, 'YYYYMMDD') )
            ]]>
        </query>
    </sql>

    <!-- 퇴직현황 내역을 수정함 -->
    <sql name="RETA040_UPT">
        <description>퇴직현황 내역을 수정함</description>
        <query>
            <![CDATA[
               UPDATE T_AC_RETMASTER
                  SET WRK_NO1  = ?
                     ,UPT_MAN  = ?
                     ,UPT_YMD  = SYSDATE
                WHERE ENO_NO   = ?
                  AND SEQ_NO   = ?
                  AND WRK_NO1 IS NULL
            ]]>
        </query>
    </sql>



<!--
***********************************************************************
* @UseCase     : RETA050
* @description : 퇴직금현황
***********************************************************************
* 2007/04/03     조정호       최초작성
***********************************************************************
-->
    <!-- 퇴직금 내역을 조회 -->
    <sql name="RETA050_SHR">
        <description>퇴직금 내역을 조회</description>
        <query>
            <![CDATA[
              SELECT SEQ_NO
                   , DECODE( SEQ_NO
                           , '0', '퇴직'
                           , '1', '중간정산 1차'
                           , '2', '중간정산 2차'
                           , '3', '중간정산 3차'
                             )       AS SEQ_NM
                   , TO_CHAR(TO_DATE(RET_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS RET_YMD --퇴직일자
                   , TO_CHAR(TO_DATE(RAM_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS RAM_YMD --퇴직금기산일
                   , NVL(RTR_AMT ,0) AS RTR_AMT        --퇴직금(중도정산금)
                   , NVL(AVG_AMT ,0) AS AVG_AMT        --평균임금
                   , NVL(PAY_DAY ,0) AS PAY_DAY        --급여일수조정
                   , NVL(BON_AVG ,0) AS BON_AVG        --산입액
                   , NVL(LSE_YY  ,0) AS LSE_YY         --근속년수
                   , NVL(LSE_MM  ,0) AS LSE_MM         --근속월수
                   , NVL(LSE_DD  ,0) AS LSE_DD         --근속일수
                   , NVL(LSE_PER ,0) AS LSE_PER        --근속비율
                   , NVL(MNOR_WAG,0) AS MNOR_WAG       --월통상임금
                   , NVL(TUN_DD  ,0) AS TUN_DD         --미사용일수
                   , NVL(PAY_AMT ,0) AS PAY_AMT        --지급액 (연월차수당)
                   , YN_TAG                            --산입액 사용여부
                FROM T_AC_RETMASTER
               WHERE ENO_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 국민연금 퇴직전환금 -->
    <sql name="RETA050_NPN">
        <description>국민연금 퇴직전환금을 조회</description>
        <query>
            <![CDATA[
            SELECT CASE
                   WHEN (SELECT COUNT(*)
                           FROM T_AC_RETMASTER
                          WHERE ENO_NO = A.ENO_NO) > 0
                   THEN 0
                   ELSE NVL(C.CTZ_AMT,0)
                    END AS RTPL_AMT
              FROM T_CM_PERSON A
               -- 국민연금
         LEFT JOIN (SELECT ENO_NO
                         , SUM(NVL(RTPL_AMT, 0)) AS CTZ_AMT
                      FROM T_AC_NPN_HISTORY
                  GROUP BY ENO_NO) C
                ON A.ENO_NO = C.ENO_NO
             WHERE A.ENO_NO = ?
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETA060
* @description : 퇴직보험금관리
***********************************************************************
* 2007/04/11     조정호       최초작성
***********************************************************************
-->
    <!-- 보험사 리스트 -->
    <sql name="RETA060_SHR">
        <description>퇴직보험금관리</description>
        <query>
            <![CDATA[
            SELECT SUBSTR(C.PIS_YM,1,4)||'-'||SUBSTR(C.PIS_YM,5,2) AS PIS_YM
                 , SF_GET_COMMNAME('01', 'BR', C.BNK_CD) AS BNK_NM
                 , NVL(F.RES_AMT , 0) AS RES_AMT    -- 적립금액
                 , NVL(D.PAID_AMT, 0) AS PAID_AMT   -- 사용금액
                 , NVL(E.INTEREST, 0) AS INTEREST   -- 이자총액
                 , 0 AS BAL_AMT                     -- 차액
              FROM (SELECT A.PIS_YY||B.PIS_MM   AS PIS_YM
                         , ?                    AS BNK_CD
                      FROM (SELECT ?            AS PIS_YY
                              FROM DUAL
                            ) A
                         , (SELECT '01' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '02' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '03' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '04' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '05' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '06' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '07' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '08' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '09' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '10' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '11' AS PIS_MM FROM DUAL
                             UNION
                            SELECT '12' AS PIS_MM FROM DUAL
                            ) B
                    ) C
         LEFT JOIN (SELECT SUBSTR(BASIC_YMD,1,6) AS BASIC_YMD
                         , BNK_CD
                         , SUM(NVL(PAID_AMT, 0)) AS PAID_AMT    -- 사용금액
                      FROM T_AC_RETINSURANCE_SAV                -- 퇴직보험금 저장 자료
                  GROUP BY BNK_CD
                         , SUBSTR(BASIC_YMD,1,6)
                    ) D
                ON C.PIS_YM = D.BASIC_YMD
               AND C.BNK_CD = D.BNK_CD
         LEFT JOIN (SELECT SUBSTR(BASIC_YMD,1,6) AS BASIC_YMD
                         , BNK_CD
                         , SUM(NVL(INTEREST, 0)) AS INTEREST    -- 이자총액
                      FROM T_AC_RETINTEREST                     -- 퇴직보험이자내역
                  GROUP BY BNK_CD
                         , SUBSTR(BASIC_YMD,1,6)
                    ) E
                ON C.PIS_YM = E.BASIC_YMD
               AND C.BNK_CD = E.BNK_CD
         LEFT JOIN (SELECT PIS_YY
                         , BNK_CD
                         , SUM(NVL(RES_AMT, 0)) AS RES_AMT      -- 적립금액
                      FROM T_AC_RETINSURANCE                    -- 퇴직보험금 저장 자료
                  GROUP BY PIS_YY
                         , BNK_CD
                    ) F
                ON SUBSTR(C.PIS_YM, 1, 4) = F.PIS_YY
               AND C.BNK_CD = F.BNK_CD
          ORDER BY PIS_YM
            ]]>
        </query>
    </sql>



<!--
***********************************************************************
* @UseCase     : RETA070
* @description : 퇴직금현황
***********************************************************************
* 2007/04/09     조정호       최초작성
***********************************************************************
-->
    <!-- 보험사 리스트 -->
    <sql name="RETA070_SHR_BNK">
        <description>보험사 리스트</description>
        <query>
            <![CDATA[
            SELECT COMM.COMM_CD AS BNK_CD
                  ,COMM.COMM_NM AS BNK_NM
              FROM T_AC_RETMASTER MAS
                  ,VI_T_CM_PERSON2 PERSON
                  ,T_AC_RETINSURANCE RET
                  ,T_CM_COMMON COMM
             WHERE MAS.ENO_NO = NVL(?, MAS.ENO_NO)
               AND MAS.ENO_NO = PERSON.ENO_NO
               AND PERSON.CET_NO = RET.CET_NO
               AND RET.PIS_YY = TO_CHAR(TO_DATE(MAS.RAM_YMD), 'YYYY')
               AND TO_CHAR(TO_DATE(MAS.RAM_YMD), 'YYYY-MM-DD') BETWEEN ? AND ?
               AND COMM.CD_GBN = 'BR'
               AND RET.BNK_CD = COMM.COMM_CD
             GROUP BY COMM_CD, COMM_NM
             ORDER BY COMM.COMM_CD
            ]]>
        </query>
    </sql>


<!--
***********************************************************************
* @UseCase     : RETA071
* @description : 퇴직금현황
***********************************************************************
* 2007/04/10     조정호       최초작성
***********************************************************************
-->
    <!-- 퇴직보험금 은행 코드 조회 -->
    <sql name="RETA071_SHR_BNK">
        <description>퇴직보험금 조회</description>
        <query>
            <![CDATA[
            SELECT C.COMM_CD AS CODE
                 , C.COMM_NM AS CODE_NAME
                 , A.RES_AMT
              FROM T_AC_RETINSURANCE A
                 , T_CM_PERSON B
                 , T_CM_COMMON C
             WHERE A.PIS_YY = ?
               AND B.ENO_NO = ?
               AND A.CET_NO = B.CET_NO
               AND A.BNK_CD = C.COMM_CD
               AND C.CD_GBN = 'BR'
            ]]>
        </query>
    </sql>

    <!-- 퇴직보험금 조회 -->
    <sql name="RETA071_SHR">
        <description>퇴직보험금 조회2</description>
        <query>
            <![CDATA[
            SELECT ENO_NO
                 , PIS_YY
                 , SEQ_NO
                 , BNK_CD
                 , PAID_AMT
                 , TO_CHAR(TO_DATE(BASIC_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS BASIC_YMD
              FROM T_AC_RETINSURANCE_SAV
             WHERE PIS_YY = ?
               AND ENO_NO = ?
          ORDER BY SF_GET_COMMNAME('01', 'BR', BNK_CD)
                 , BASIC_YMD DESC
            ]]>
        </query>
    </sql>

    <!-- 퇴직보험금 등록 -->
    <sql name="RETA071_INS">
        <description>퇴직보험금 등록</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETINSURANCE_SAV
                 ( ENO_NO
                 , PIS_YY
                 , SEQ_NO
                 , BNK_CD
                 , PAID_AMT
                 , BASIC_YMD
                 , IPT_MAN
                 , UPT_MAN
                 , IPT_YMD
                 , UPT_YMD)
          VALUES ( ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , ?
                 , SYSDATE
                 , SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 퇴직보험금 등록 -->
    <sql name="RETA071_UPT">
        <description>퇴직보험금 등록</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETINSURANCE_SAV
               SET PAID_AMT     = ?
                 , UPT_MAN      = ?
                 , UPT_YMD      = SYSDATE
             WHERE ENO_NO       = ?
               AND PIS_YY       = ?
               AND SEQ_NO       = ?
               AND BNK_CD       = ?
               AND BASIC_YMD    = ?
            ]]>
        </query>
    </sql>

    <!-- 퇴직보험금 삭제 -->
    <sql name="RETA071_DEL">
        <description>퇴직보험금 삭제</description>
        <query>
            <![CDATA[
            DELETE
              FROM T_AC_RETINSURANCE_SAV
             WHERE ENO_NO = ?
               AND PIS_YY = ?
               AND SEQ_NO = ?
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETA090
* @description : 퇴직금계산처리 RETA030_SHR_PAY  마지막달 처리 상이
***********************************************************************
* 2010/08/06     권혁수      수정
***********************************************************************
-->

    <!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA090_SHR_PAY">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
              --급여 산정 내역을 조회
              SELECT  ROUND(BAS_AMT/LAST_DAY*PAST_DAY)     AS BAS_AMT    --기본급여
                        ,   ROUND(DUTY_AMT/LAST_DAY*PAST_DAY)   AS DUTY_AMT   --직무수당
                        ,   ROUND(LAW_AMT/LAST_DAY*PAST_DAY)     AS LAW_AMT   --법정수당
                        ,   ROUND(BNS_AMT/LAST_DAY*PAST_DAY)     AS BNS_AMT    --상여금
                        ,   ROUND(ETC_AMT/LAST_DAY*PAST_DAY)     AS OTH_AMT     --기타수당(교통비+출납수당)
                   , HOL_AMT     							--기타지불(휴일근무수당)
                   , PIS_YY                                             --년수
                   , PIS_MM                                             --월수
                   , LAST_DAY                                           --월일수
                   , PAST_DAY                                           --근무일수
                   , WORKING_DATE
                   , FROM_YMD           AS STR_YMD
                   , TO_YMD             AS END_YMD
                FROM (
                      --월별 총 근무 일수, 근무기간등을 가지고 오기
                      SELECT AA.NUM
                           , AA.PIS_YY
                           , AA.PIS_MM
                           , AA.ENO_NO
                           , LAST_DAY
                           , AA.BAS_AMT         --기본급여
                           , AA.DUTY_AMT        --직무수당
                           , AA.LAW_AMT          --법정수당
                           , AA.BNS_AMT         --상여금
                           , AA.ETC_AMT         --기타수당(교통비)
                           , AA.HOL_AMT         --기타수당(출납수당)
                           , DECODE( NUM
                                   , 1       , LAST_DAY - TO_CHAR(FROM_YMD, 'DD') +1
                                   , MONTHS  , TO_CHAR(TO_YMD, 'DD')
                                   , LAST_DAY
                                     ) AS PAST_DAY
                           , DECODE( NUM
                                   , 1       , PIS_YM||'-'||TO_CHAR(FROM_YMD, 'DD')||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                   , MONTHS  , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||TO_CHAR(TO_YMD, 'DD')
                                   , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                     ) AS WORKING_DATE
                           , DECODE( AA.NUM
                                   , 1     , AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.FROM_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||'01'
                                     ) AS FROM_YMD
                           , DECODE( AA.NUM
                                   , MONTHS, AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.TO_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||AA.LAST_DAY
                                     ) AS TO_YMD
                        FROM (
                              --월 마지막날 가지고 오기
                              SELECT ROW_NUMBER() OVER(ORDER BY C.PIS_YY, C.PIS_MM) AS NUM
                                   , C.PIS_YY||'-'||C.PIS_MM AS PIS_YM
                                   , C.PIS_YY
                                   , C.PIS_MM
                                   , C.ENO_NO
                                   , C.FROM_YMD
                                   , C.TO_YMD
                                   , C.MONTHS
                                   , TO_CHAR(LAST_DAY(TO_DATE(C.PIS_YY||C.PIS_MM||'01','YYYYMMDD')), 'DD') AS LAST_DAY
                                   , NVL(C.BAS_AMT , D.BAS_AMT)             AS BAS_AMT      --기본급여
                                   , NVL(C.DUTY_AMT, D.DUTY_AMT)            AS DUTY_AMT     --직무수당
                                   , NVL(C.LAW_AMT  , D.LAW_AMT  )          AS LAW_AMT       --법정수당
                                   , NVL(C.BNS_AMT , D.BNS_AMT )            AS BNS_AMT      --상여금
                                   , NVL(C.ETC_AMT , D.ETC_AMT )            AS ETC_AMT      --기타수당(교통비)
                                   , NVL(C.HOL_AMT , 0)                           AS HOL_AMT      --기타수당(출납수당)
                                FROM (
                                      --급여 마스터에서 급여 가지고 오기
                                      SELECT B.ENO_NO
                                           , B.PIS_YY
                                           , B.PIS_MM
                                           , B.FROM_YMD
                                           , B.TO_YMD
                                           , B.MONTHS
                                           , A.BAS_AMT
                                           , A.DUTY_AMT
                                           , A.LAW_AMT
                                           , A.BNS_AMT
                                           , A.ETC_AMT
                                           , A.HOL_AMT
                                        FROM (-- 급여 지급내용 가져오기
                                               SELECT E.ENO_NO
                                                   , E.PIS_YY
                                                   , E.PIS_MM
                                                   , NVL(E.BAS_AMT  , 0)-NVL(E.LAW_AMT   , 0)-NVL(E.BNS_AMT  , 0) AS BAS_AMT
                                                   , NVL(E.DUTY_AMT , 0) AS DUTY_AMT	--직무수당
                                                   , NVL(E.LAW_AMT   , 0)  AS LAW_AMT	--법정수당
                                                   , NVL(E.BNS_AMT  , 0)  AS BNS_AMT	--상여금
                                                   , NVL(E.ETC_AMT  , 0) AS ETC_AMT		--기타수당(교통비)
                                                   , NVL(E.HOL_AMT  , 0) AS HOL_AMT	--기타수당(출납수당)
                                                FROM T_CP_PAYMASTER E   -- 급여 MASTER
                                               WHERE E.SAL_GBN  = '0'
                                              ) A
                                           --날짜값 비교를 위해 더미 TABLE (근무 월을 가지고 오기)
                                           , (SELECT N.*
                                                FROM (SELECT NUM
                                                           , L.FROM_YMD
                                                           , L.TO_YMD
                                                           , L.MONTHS
                                                           , L.ENO_NO
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'YYYY')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'YYYY')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'YYYY')
                                                             WHEN M.NUM = 4 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'YYYY')
                                                              END AS PIS_YY
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'MM')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'MM')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'MM')
                                                             WHEN M.NUM = 4
                                                              AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'MM')
                                                              END AS PIS_MM
                                                        FROM (SELECT CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN ADD_MONTHS(TO_DATE(TO_CHAR(SCH_YMD,'YYYYMM')||'01'),-2)
                                                                     ELSE ADD_MONTHS(SCH_YMD,-3)+1
                                                                      END AS FROM_YMD
                                                                   , SCH_YMD AS TO_YMD
                                                                   , CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN 3
                                                                     ELSE 4
                                                                      END AS MONTHS
                                                                   , ENO_NO
                                                                   , SCH_YMD                AS MON1
                                                                   , ADD_MONTHS(SCH_YMD,-1) AS MON2
                                                                   , ADD_MONTHS(SCH_YMD,-2) AS MON3
                                                                   , ADD_MONTHS(SCH_YMD,-3) AS MON4
                                                                FROM (SELECT TO_DATE(?, 'YYYY-MM-DD') AS SCH_YMD
                                                                           , ? AS ENO_NO
                                                                        FROM DUAL)
                                                              ) L
                                                           , (SELECT 1 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 2 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 3 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 4 AS NUM
                                                                FROM DUAL
                                                              ) M
                                                      ) N
                                               WHERE MONTHS-NUM >= 0
                                              ) B
                                       WHERE B.ENO_NO = A.ENO_NO(+)
                                         AND B.PIS_YY = A.PIS_YY(+)
                                         AND B.PIS_MM = A.PIS_MM(+)
                                      ) C
                                   --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기 (급여 마스터에서 급여 항목이 없을 경우를 대비해)
                                   , (SELECT O.*
                                        FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.APY_YMD DESC) AS NUM
                                                   , H.ENO_NO
                                                   , H.BAS_AMT
                                                   , H.DUTY_AMT
                                                   , H.LAW_AMT
                                                   , H.BNS_AMT
                                                   , H.ETC_AMT
                                                FROM T_CP_PAYTABLE H
                                                   , T_CM_PERSON I
                                               WHERE I.ENO_NO = ?
                                                 AND H.ENO_NO = I.ENO_NO
                                              ) O
                                       WHERE O.NUM = 1
        							  ) D
        						  where c.eno_no=d.eno_no
                              )AA
                      ) BB
            ORDER BY PIS_YY
                   , PIS_MM
            ]]>
        </query>
    </sql>

	<!-- 산정 내역 정보를 조회 한다. -->
    <sql name="RETA090_SHR_PAY2">
        <description>산정 내역  조회</description>
        <query>
            <![CDATA[
            SELECT
                SUM(TT.BAS_AMT) AS BAS_AMT
               ,SUM(TT.DUTY_AMT)	AS DUTY_AMT
               ,SUM(TT.LAW_AMT)	AS LAW_AMT
               ,SUM(TT.BNS_AMT)	AS BNS_AMT
               ,SUM(TT.OTH_AMT)	AS OTH_AMT
               ,SUM(TT.HOL_AMT)	AS HOL_AMT
            FROM (
              --급여 산정 내역을 조회
              SELECT  ROUND(BAS_AMT/LAST_DAY*PAST_DAY)     AS BAS_AMT    --기본급여
                        ,   ROUND(DUTY_AMT/LAST_DAY*PAST_DAY)   AS DUTY_AMT   --직무수당
                        ,   ROUND(LAW_AMT/LAST_DAY*PAST_DAY)     AS LAW_AMT   --법정수당
                        ,   ROUND(BNS_AMT/LAST_DAY*PAST_DAY)     AS BNS_AMT    --상여금
                        ,   ROUND(ETC_AMT/LAST_DAY*PAST_DAY)     AS OTH_AMT     --기타수당(교통비+출납수당)
                   , HOL_AMT     --기타지불(휴일근무수당)
                   , PIS_YY                                             --년수
                   , PIS_MM                                             --월수
                   , LAST_DAY                                           --월일수
                   , PAST_DAY                                           --근무일수
                   , WORKING_DATE
                   , FROM_YMD           AS STR_YMD
                   , TO_YMD             AS END_YMD
                FROM (
                      --월별 총 근무 일수, 근무기간등을 가지고 오기
                      SELECT AA.NUM
                           , AA.PIS_YY
                           , AA.PIS_MM
                           , AA.ENO_NO
                           , LAST_DAY
                           , AA.BAS_AMT         --기본급여
                           , AA.DUTY_AMT        --직무수당
                           , AA.LAW_AMT          --법정수당
                           , AA.BNS_AMT         --상여금
                           , AA.ETC_AMT         --기타수당(교통비)
                           , AA.HOL_AMT         --기타수당(출납수당)
                           , DECODE( NUM
                                   , 1       , LAST_DAY - TO_CHAR(FROM_YMD, 'DD') +1
                                   , MONTHS  , TO_CHAR(TO_YMD, 'DD')
                                   , LAST_DAY
                                     ) AS PAST_DAY
                           , DECODE( NUM
                                   , 1       , PIS_YM||'-'||TO_CHAR(FROM_YMD, 'DD')||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                   , MONTHS  , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||TO_CHAR(TO_YMD, 'DD')
                                   , PIS_YM||'-'||'01'||CHR(13)||CHR(10)||PIS_YM||'-'||LAST_DAY
                                     ) AS WORKING_DATE
                           , DECODE( AA.NUM
                                   , 1     , AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.FROM_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||'01'
                                     ) AS FROM_YMD
                           , DECODE( AA.NUM
                                   , MONTHS, AA.PIS_YY||AA.PIS_MM||TO_CHAR(AA.TO_YMD, 'DD')
                                   ,         AA.PIS_YY||AA.PIS_MM||AA.LAST_DAY
                                     ) AS TO_YMD
                        FROM (
                              --월 마지막날 가지고 오기
                              SELECT ROW_NUMBER() OVER(ORDER BY C.PIS_YY
                                                              , C.PIS_MM
                                                       ) AS NUM
                                   , C.PIS_YY||'-'||C.PIS_MM AS PIS_YM
                                   , C.PIS_YY
                                   , C.PIS_MM
                                   , C.ENO_NO
                                   , C.FROM_YMD
                                   , C.TO_YMD
                                   , C.MONTHS
                                   , TO_CHAR(LAST_DAY(TO_DATE(C.PIS_YY||C.PIS_MM||'01','YYYYMMDD')), 'DD') AS LAST_DAY
                                   , NVL(C.BAS_AMT , D.BAS_AMT)             AS BAS_AMT      --기본급여
                                   , NVL(C.DUTY_AMT, D.DUTY_AMT)            AS DUTY_AMT     --직무수당
                                   , NVL(C.LAW_AMT  , D.LAW_AMT  )          AS LAW_AMT       --법정수당
                                   , NVL(C.BNS_AMT , D.BNS_AMT )            AS BNS_AMT      --상여금
                                   , NVL(C.ETC_AMT , D.ETC_AMT )            AS ETC_AMT      --기타수당(교통비)
                                   , NVL(C.HOL_AMT , 0 )            AS HOL_AMT      --기타수당(출납수당)
                                FROM (
                                      --급여 마스터에서 급여 가지고 오기
                                      SELECT B.ENO_NO
                                           , B.PIS_YY
                                           , B.PIS_MM
                                           , B.FROM_YMD
                                           , B.TO_YMD
                                           , B.MONTHS
                                           , A.BAS_AMT
                                           , A.DUTY_AMT
                                           , A.LAW_AMT
                                           , A.BNS_AMT
                                           , A.ETC_AMT
                                           , A.HOL_AMT                                  FROM (-- 급여 지급내용 가져오기
                                               SELECT E.ENO_NO
                                                   , E.PIS_YY
                                                   , E.PIS_MM
                                                   , NVL(E.BAS_AMT  , 0)-NVL(E.LAW_AMT   , 0)-NVL(E.BNS_AMT  , 0) AS BAS_AMT
                                                   , NVL(E.DUTY_AMT , 0) AS DUTY_AMT	--직무수당
                                                   , NVL(E.LAW_AMT   , 0)  AS LAW_AMT	--법정수당
                                                   , NVL(E.BNS_AMT  , 0)  AS BNS_AMT	--상여금
                                                   , NVL(E.ETC_AMT  , 0) AS ETC_AMT		--기타수당(교통비)
                                                   , NVL(E.HOL_AMT  , 0) AS HOL_AMT	--기타수당(출납수당)
                                                FROM T_CP_PAYMASTER E   -- 급여 MASTER
                                               WHERE E.SAL_GBN  = '0'
                                              ) A
                                           --날짜값 비교를 위해 더미 TABLE (근무 월을 가지고 오기)
                                           , (SELECT N.*
                                                FROM (SELECT NUM
                                                           , L.FROM_YMD
                                                           , L.TO_YMD
                                                           , L.MONTHS
                                                           , L.ENO_NO
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'YYYY')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'YYYY')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'YYYY')
                                                             WHEN M.NUM = 4 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'YYYY')
                                                              END AS PIS_YY
                                                           , CASE
                                                             WHEN M.NUM = 1 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON1, 'MM')
                                                             WHEN M.NUM = 2 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON2, 'MM')
                                                             WHEN M.NUM = 3 AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON3, 'MM')
                                                             WHEN M.NUM = 4
                                                              AND MONTHS - M.NUM >= 0
                                                             THEN TO_CHAR(L.MON4, 'MM')
                                                              END AS PIS_MM
                                                        FROM (SELECT CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN ADD_MONTHS(TO_DATE(TO_CHAR(SCH_YMD,'YYYYMM')||'01'),-2)
                                                                     ELSE ADD_MONTHS(SCH_YMD,-3)+1
                                                                      END AS FROM_YMD
                                                                   , SCH_YMD AS TO_YMD
                                                                   , CASE
                                                                     WHEN TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD,'DD')
                                                                       OR TO_CHAR(LAST_DAY(SCH_YMD),'DD') = TO_CHAR(SCH_YMD+1,'DD')
                                                                     THEN 3
                                                                     ELSE 4
                                                                      END AS MONTHS
                                                                   , ENO_NO
                                                                   , SCH_YMD                AS MON1
                                                                   , ADD_MONTHS(SCH_YMD,-1) AS MON2
                                                                   , ADD_MONTHS(SCH_YMD,-2) AS MON3
                                                                   , ADD_MONTHS(SCH_YMD,-3) AS MON4
                                                                FROM (SELECT TO_DATE(?, 'YYYY-MM-DD') AS SCH_YMD
                                                                           , ? AS ENO_NO
                                                                        FROM DUAL)
                                                              ) L
                                                           , (SELECT 1 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 2 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 3 AS NUM
                                                                FROM DUAL
                                                               UNION
                                                              SELECT 4 AS NUM
                                                                FROM DUAL
                                                              ) M
                                                      ) N
                                               WHERE MONTHS-NUM >= 0
                                              ) B
                                       WHERE B.ENO_NO = A.ENO_NO(+)
                                         AND B.PIS_YY = A.PIS_YY(+)
                                         AND B.PIS_MM = A.PIS_MM(+)
                                      ) C
                                   --연봉 테이블에서 해당 사번의 연봉 항목을 가져오기 (급여 마스터에서 급여 항목이 없을 경우를 대비해)
                                   , (SELECT O.*
                                        FROM (SELECT ROW_NUMBER() OVER(ORDER BY H.APY_YMD DESC) AS NUM
                                                   , H.ENO_NO
                                                   , H.BAS_AMT
                                                   , H.DUTY_AMT
                                                   , H.LAW_AMT
                                                   , H.BNS_AMT
                                                   , H.ETC_AMT
                                                FROM T_CP_PAYTABLE H
                                                   , T_CM_PERSON I
                                               WHERE I.ENO_NO = ?
                                                 AND H.ENO_NO = I.ENO_NO
                                              ) O
                                       WHERE O.NUM = 1
        							  ) D
        						  where c.eno_no=d.eno_no
                              )AA
                      ) BB
            ORDER BY PIS_YY
                   , PIS_MM ) TT
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETB010
* @description : 퇴직급여충당금
***********************************************************************
* 2007/04/12     조정호       최초작성
***********************************************************************
-->
    <!-- 처리가 완료된 퇴직 충당금을 가져오기 -->
    <sql name="RETB010_SHR">
        <description>처리가 완료된 퇴직 충당금을 가져오기</description>
        <query>
            <![CDATA[
            SELECT A.PIS_YY
		          , C.RET_GBN
		          , (SELECT COMM_NM FROM T_CM_COMMON WHERE  GUBUN = '01' AND CD_GBN = 'U6' AND COMM_CD = C.RET_GBN) RET_GBN_NM
		          , A.PIS_MM
		          , A.OCC_CD
		          , A.JOB_CD
		          , A.DPT_CD
		          , SF_GET_COMMNAME('01', 'A1', A.OCC_CD) AS OCC_NM
		          , SF_GET_COMMNAME('01', 'A2', A.JOB_CD) AS JOB_NM
		          , SF_GET_DPTNAME( '01', 'A4', A.DPT_CD) AS DPT_NM
		          , A.ENO_NO
		          , A.ENO_NM
		          , A.CET_NO
                 , TO_CHAR(HIRR_YMD, 'YYYY/MM/DD') AS HIRR_YMD
                 , TO_CHAR(LSE_DD) AS LSE_DD
                 , NVL(PAY_AMT        ,0) AS PAY_AMT
                 , NVL(BONUS_AMT      ,0) AS BONUS_AMT
                 , NVL(SCH_AMT        ,0) AS SCH_AMT
                 , NVL(TOT_PAY_AMT    ,0) AS TOT_PAY_AMT
                 , NVL(TOT_BONUS_AMT  ,0) AS TOT_BONUS_AMT
                 , NVL(YMA_AMT        ,0) AS YMA_AMT
                 , NVL(AVG_AMT        ,0) AS AVG_AMT
                 , NVL(RES_AMT        ,0) AS RES_AMT
                 , NVL((SELECT NVL(RES_AMT    ,0)
                          FROM T_AC_RESERVE
                         WHERE PIS_YY||PIS_MM = TO_CHAR(ADD_MONTHS(TO_DATE(?||?, 'YYYYMM'), -1), 'YYYYMM')
                           AND ENO_NO = A.ENO_NO),0) AS TOT_RES_AMT
                 , NVL(RES_AMT,0) - NVL((SELECT NVL(RES_AMT    ,0)
                                           FROM T_AC_RESERVE
                                          WHERE PIS_YY||PIS_MM = TO_CHAR(ADD_MONTHS(TO_DATE(?||?, 'YYYYMM'), -1), 'YYYYMM')
                                            AND ENO_NO = A.ENO_NO),0) AS MON_RES_AMT
                 , REASON
              FROM T_AC_RESERVE A
                 ,(SELECT ENO_NO, HOB_CD FROM T_CM_PERSON) B
          , T_CP_RETMASTER C
             WHERE A.ENO_NO = B.ENO_NO(+)
               AND A.ENO_NO = C.ENO_NO(+)
               AND A.PIS_YY = ?
               AND A.PIS_MM = ?
               AND A.OCC_CD = NVL(?, OCC_CD)
               AND A.DPT_CD = NVL(?, DPT_CD)
               AND A.JOB_CD = NVL(?, JOB_CD)
          ORDER BY OCC_CD
                  ,SF_GET_DPTSEQ ('01', 'A4', DPT_CD)
                  ,SF_GET_COMMSEQ('01', 'A2', JOB_CD)
                  ,SF_GET_COMMSEQ('01', 'A3', B.HOB_CD) DESC
                  ,A.ENO_NO
            ]]>
        </query>
    </sql>

    <!-- 충당금 자료가 있는지 여부 검증 -->
    <sql name="RETB010_CHK">
        <description>충당금 자료가 있는지 여부 검증</description>
        <query>
            <![CDATA[
              SELECT COUNT(*)
                FROM T_AC_RESERVE RES
               WHERE PIS_YY = ?
                 AND PIS_MM = ?
                 AND ENO_NO LIKE ?||'%'
            ]]>
        </query>
    </sql>

    <!-- 퇴직 충당금 입력 -->
    <sql name="RETB010_INS">
        <description>처리가 완료된 퇴직 충당금을 가져오기</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RESERVE
                   (PIS_YY
                   ,PIS_MM
                   ,ENO_NO
                   ,ENO_NM
                   ,CET_NO
                   ,OCC_CD
                   ,DPT_CD
                   ,JOB_CD
                   ,HIRR_YMD
                   ,LSE_DD
                   ,PAY_AMT
                   ,BONUS_AMT
                   ,SCH_AMT
                   ,TOT_PAY_AMT
                   ,TOT_BONUS_AMT
                   ,YMA_AMT
                   ,AVG_AMT
                   ,RES_AMT
                   ,TOT_RES_AMT
                   ,MON_RES_AMT
                   ,REASON
                   ,IPT_MAN
                   ,UPT_MAN
                   ,IPT_YMD
                   ,UPT_YMD)
            VALUES (?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,TO_DATE(?)
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,?
                   ,SYSDATE
                   ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 충당금 자료 수정 -->
    <sql name="RETB010_UPT">
        <description>충당금 자료 수정</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RESERVE
               SET LSE_DD           = ?
                  ,PAY_AMT          = ?
                  ,BONUS_AMT        = ?
                  ,SCH_AMT          = ?
                  ,TOT_PAY_AMT      = ?
                  ,TOT_BONUS_AMT    = ?
                  ,YMA_AMT          = ?
                  ,AVG_AMT          = ?
                  ,RES_AMT          = ?
                  ,TOT_RES_AMT      = ?
                  ,MON_RES_AMT      = ?
                  ,REASON           = ?
                  ,UPT_MAN          = ?
                  ,UPT_YMD          = SYSDATE
             WHERE PIS_YY           = ?
               AND PIS_MM           = ?
               AND ENO_NO           = ?
            ]]>
        </query>
    </sql>

    <!-- 처리가 완료된 퇴직 충당금을 가져오기 -->
    <sql name="RETB010_PROC_SHR">
        <description>처리가 완료된 퇴직 충당금을 가져오기</description>
        <query>
            <![CDATA[
            SELECT PIS_YY
                 , PIS_MM
                 , OCC_CD
                 , JOB_CD
                 , DPT_CD
                 , SF_GET_COMMNAME('01', 'A1', OCC_CD) AS OCC_NM
                 , SF_GET_COMMNAME('01', 'A2', JOB_CD) AS JOB_NM
                 , SF_GET_DPTNAME( '01', 'A4', DPT_CD) AS DPT_NM
                 , A.ENO_NO
                 , ENO_NM
                 , CET_NO
                 , TO_CHAR(HIRR_YMD, 'YYYY/MM/DD') AS HIRR_YMD
                 , TO_CHAR(LSE_DD) AS LSE_DD
                 , NVL(PAY_AMT        ,0) AS PAY_AMT
                 , NVL(BONUS_AMT      ,0) AS BONUS_AMT
                 , NVL(SCH_AMT        ,0) AS SCH_AMT
                 , NVL(TOT_PAY_AMT    ,0) AS TOT_PAY_AMT
                 , NVL(TOT_BONUS_AMT  ,0) AS TOT_BONUS_AMT
                 , NVL(YMA_AMT        ,0) AS YMA_AMT
                 , NVL(AVG_AMT        ,0) AS AVG_AMT
                 , NVL(RES_AMT        ,0) AS RES_AMT
                 , NVL((SELECT NVL(RES_AMT    ,0)
                          FROM T_AC_RESERVE
                         WHERE PIS_YY||PIS_MM = TO_CHAR(ADD_MONTHS(TO_DATE(?||?, 'YYYYMM'), -1), 'YYYYMM')
                           AND ENO_NO = A.ENO_NO),0) AS TOT_RES_AMT
                 , NVL(RES_AMT,0) - NVL((SELECT NVL(RES_AMT    ,0)
                                           FROM T_AC_RESERVE
                                          WHERE PIS_YY||PIS_MM = TO_CHAR(ADD_MONTHS(TO_DATE(?||?, 'YYYYMM'), -1), 'YYYYMM')
                                            AND ENO_NO = A.ENO_NO),0) AS MON_RES_AMT
                 , REASON
              FROM T_AC_RESERVE A
                 ,(SELECT ENO_NO, HOB_CD FROM T_CM_PERSON) B
             WHERE A.ENO_NO = B.ENO_NO(+)
               AND PIS_YY = ?
               AND PIS_MM = ?
               AND OCC_CD = NVL(?, OCC_CD)
               AND DPT_CD = NVL(?, DPT_CD)
               AND JOB_CD = NVL(?, JOB_CD)
          ORDER BY OCC_CD
                 , SF_GET_DPTSEQ ('01', 'A4', DPT_CD)
                 , SF_GET_COMMSEQ('01', 'A2', JOB_CD)
                 , SF_GET_COMMSEQ('01', 'A3', B.HOB_CD) DESC
                 , A.ENO_NO
            ]]>
        </query>
    </sql>

    <!-- 퇴직급여 충당금을 가져온다. -->
    <sql name="RETB010_PROC1">
        <description>퇴직급여 충당금을 가져온다.(기존 쿼리 그대로 활용)</description>
        <query>
            <![CDATA[
 DECLARE
        bas_pis_ym   varchar2(6);
        bas_pis_yy   varchar2(4);
        bas_pis_mm   varchar2(2);
        pay_str_mon  varchar2(6);
        pay_yma_mon  varchar2(6);
        bon_pis_yy   varchar2(8);
        bon_pay_pct  varchar2(6);
        bon_tot_pct  number;
        mon_cnt      number;
        bas_eno_no   varchar2(9);


        res_eno_no   varchar2(8);
        res_eno_nm   varchar2(8);
        res_cet_no   varchar2(14);
        res_occ_cd   varchar2(4);
        res_dpt_cd   varchar2(4);
        res_job_cd   varchar2(4);
        res_hirr_ymd date;
        res_lse_dd        number;
        res_tot_pay_amt   number;
        res_tot_bonus_amt number;
        res_pay_amt       number;
        res_bonus_amt     number;
        res_sch_amt       number;
        res_yma_amt       number;
        res_avg_amt       number;
        res_res_amt       number;
        res_reason        varchar2(15);

    /* 3개월 시작일 */
    cursor pay_cur(bas_pis_ym char) is
           select to_char(add_months(to_date(bas_pis_ym,'yyyymm'),-2),'yyyymm')
             from dual;

    /* 3개월 일수 */
    cursor month_cur(bas_pis_ym char, pay_str_mon char) is
           select to_date(to_char(to_date(bas_pis_ym,'yyyymm'),'yyyymm')||
                  to_char(last_day(to_date(bas_pis_ym,'yyyymm')),'dd'),'yyyymmdd')
                - to_date(pay_str_mon||'01','yyyymmdd') + 1
             from dual;

    /* 연월차 지급월 */
    cursor yma_cur(bas_pis_ym char) is
           select max(pis_yy||pis_mm)
             from t_cp_worklog
            where pis_yy||pis_mm <= bas_pis_ym
              and sal_gbn = '4'
              and occ_cd = 'A';

    /* 상여 800% 시작월 */
    cursor bon_cur(bas_pis_ym char) is
           select pis_yy||pis_mm||seq, nvl(bpay_pct,0)
             from t_cp_worklog
            where pis_yy||pis_mm <= bas_pis_ym
              and sal_gbn  = '1'
              and nvl(ret_tag,'Y') <> 'N'
              and occ_cd   = 'A'
         order by pis_yy||pis_mm||seq desc;

    /* 퇴충 계산 */
    cursor ret_cur(bas_pis_ym char, bas_pis_yy char, bas_pis_mm char, mon_cnt number, bon_tot_pct number, bon_pis_yy char, pay_str_mon char, pay_yma_mon char) is
           select a.eno_no, a.eno_nm, a.cet_no, a.occ_cd, a.dpt_cd, a.job_cd,
                  nvl(a.hirr_ymd,a.hir_ymd),

                  to_date(to_char(to_date(bas_pis_ym,'yyyymm'),'yyyymm')||
                  to_char(last_day(to_date(bas_pis_ym,'yyyymm')),'dd'),'yyyymmdd') -
                  nvl(a.hirr_ymd,a.hir_ymd) + 1,

                  nvl(f.salt_amt,0),
                  nvl(h.salt_amt,0) - decode(bon_tot_pct,800,0,850,nvl(i.salt_amt,0)),
                  nvl(d.salt_amt,0), nvl(e.salt_amt,0), nvl(d.sch_amt,0) + nvl(e.sch_amt,0),
                  nvl(j.yma_amt,0),

                  ceil(nvl(f.salt_amt,0) * 30/  mon_cnt) +
                  ceil((nvl(h.salt_amt,0) - decode( bon_tot_pct,800,0,850,nvl(i.salt_amt,0)) + nvl(j.yma_amt,0)) / 12),

                  ceil((ceil(nvl(f.salt_amt,0) * 30/  mon_cnt) +
                  ceil((nvl(h.salt_amt,0) - decode( bon_tot_pct,800,0,850,nvl(i.salt_amt,0)) + nvl(j.yma_amt,0)) / 12)) *

                  (round((to_date(to_char(to_date(bas_pis_ym,'yyyymm'),'yyyymm')||
                          to_char(last_day(to_date(bas_pis_ym,'yyyymm')),'dd'),'yyyymmdd') -
                           nvl(a.hirr_ymd,a.hir_ymd) + 1)/365,2)) *

                  (decode(a.job_cd,'AB',2.5,'A5',2.5,'A4',3,
                                   'A3',3,'A2',4,'A1',4,'AC',4,'A7',0,'AA',0,1))),

                   decode(a.job_cd,'AB','가중치 2.5배','A5','가중치 2.5배','A4','가중치 3배',
                                   'A3','가중치 3배','A2','가중치 4배','A1','가중치 4배',
                                   'AC','가중치 4배',
                                   'A7','퇴직금 제외','AA','퇴직금 제외','')

              from t_cm_person a, t_cm_dept b, t_cm_common c,
                   (select a.eno_no eno_no, a.salt_amt - nvl(b.amt,0) + nvl(c.amt,0) salt_amt,
                           nvl(a.sch_amt,0) sch_amt
                      from (select eno_no, nvl(sum(salt_amt),0) - nvl(sum(sch_amt),0) -
                                   nvl(sum(wel_point),0) salt_amt,
                                   nvl(sum(sch_amt),0) sch_amt
                              from t_cp_paymaster
                             where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                               and sal_gbn = '0'
                    group by eno_no) a,
                     (select eno_no, sum(amount) amt
                        from t_cp_change
                       where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                         and sal_gbn = '0'
                         and back_yy = bas_pis_yy
                    group by eno_no) b,
                     (select eno_no, sum(amount) amt
                        from t_cp_change
                       where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                         and back_gbn = '0' and back_mm <= bas_pis_mm
                         and back_yy = bas_pis_yy
                    group by eno_no) c
               where a.eno_no = b.eno_no(+)
                 and a.eno_no = c.eno_no(+)) d,

           (select a.eno_no eno_no, a.salt_amt - nvl(b.amt,0) + nvl(c.amt,0) salt_amt,
                   nvl(a.sch_amt,0) sch_amt
              from (select eno_no, nvl(sum(salt_amt),0) - nvl(sum(sch_amt),0) -
                                   nvl(sum(wel_point),0) salt_amt,
                           nvl(sum(sch_amt),0) sch_amt
                      from t_cp_paymaster
                     where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                       and sal_gbn = '1'
                       and nvl(ret_tag,'Y') <>'N'
                  group by eno_no) a,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                       and sal_gbn = '1'
                       and back_yy = bas_pis_yy
                  group by eno_no) b,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy = bas_pis_yy and pis_mm <= bas_pis_mm
                       and back_gbn = '1' and back_mm <= bas_pis_mm
                       and back_yy = bas_pis_yy
                  group by eno_no) c
             where a.eno_no = b.eno_no(+)
               and a.eno_no = c.eno_no(+)) e,

           (select a.eno_no eno_no, a.salt_amt - nvl(b.amt,0) + nvl(c.amt,0) salt_amt
              from (select eno_no, nvl(sum(salt_amt),0) - nvl(sum(sch_amt),0) -
                                   nvl(sum(wel_point),0) salt_amt
                      from t_cp_paymaster
                     where pis_yy||pis_mm between  pay_str_mon and bas_pis_ym
                       and sal_gbn = '0'
                  group by eno_no) a,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy||pis_mm between  pay_str_mon and bas_pis_ym
                       and sal_gbn = '0'
                       and back_yy is not null
                  group by eno_no) b,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy||pis_mm between  pay_str_mon and bas_pis_ym
                       and back_yy||back_mm between  pay_str_mon and bas_pis_ym
                       and back_gbn = '0'
                  group by eno_no) c
             where a.eno_no = b.eno_no(+)
               and a.eno_no = c.eno_no(+)) f,

           (select a.eno_no eno_no, a.salt_amt - nvl(b.amt,0) + nvl(c.amt,0) salt_amt
              from (select eno_no, nvl(sum(salt_amt),0) - nvl(sum(sch_amt),0) -
                                   nvl(sum(wel_point),0) salt_amt
                      from t_cp_paymaster
                     where pis_yy||pis_mm||seq between  bon_pis_yy and bas_pis_ym||'2'
                       and sal_gbn = '1'
                       and nvl(ret_tag,'Y') <>'N'
                  group by eno_no) a,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy||pis_mm||bon_num between  bon_pis_yy and bas_pis_ym||'2'
                       and sal_gbn = '1'
                       and back_yy is not null
                  group by eno_no) b,
                   (select eno_no, sum(amount) amt
                      from t_cp_change
                     where pis_yy||pis_mm||bon_num between  bon_pis_yy and bas_pis_ym||'2'
                       and back_yy||back_mm||bon_num between  bon_pis_yy and bas_pis_ym||'2'
                       and back_gbn = '1'
                  group by eno_no) c
             where a.eno_no = b.eno_no(+)
               and a.eno_no = c.eno_no(+)) h,

            (select a.eno_no eno_no, nvl(a.salt_amt,0)+nvl(b.amt,0) salt_amt
               from (select eno_no,
                            round((nvl(sum(salt_amt),0) - nvl(sum(sch_amt),0) -
                                   nvl(sum(wel_point),0))/2) salt_amt
                       from t_cp_paymaster
                      where pis_yy||pis_mm||seq = bon_pis_yy
                        and sal_gbn = '1'
                        and nvl(ret_tag,'Y') <>'N'
                   group by eno_no) a,
                     (select eno_no, nvl(sum(amount),0)/2 amt
                        from t_cp_change
                       where back_yy||back_mm||bon_num = bon_pis_yy
                         and back_gbn = '1'
                    group by eno_no) b
              where a.eno_no = b.eno_no(+)) i,

           (select eno_no, nvl(sum(salt_amt),0) yma_amt
              from t_cp_paymaster
             where pis_yy||pis_mm = pay_yma_mon
               and sal_gbn = '4'
               and nvl(ret_tag,'Y') <>'N'
          group by eno_no) j

     where a.dpt_cd = b.dpt_cd and b.cd_gbn = 'A4'
       and a.job_cd = c.comm_cd and c.cd_gbn = 'A2'
       and (to_char(a.ret_ymd,'yyyymmdd') is null or to_char(a.ret_ymd,'yyyymmdd') >= bas_pis_ym||to_char(last_day(to_date(bas_pis_ym,'yyyymm')),'dd'))
       and (to_char(a.hir_ymd,'yyyymmdd') < to_char(to_date(to_char(to_date(bas_pis_ym,'yyyymm'),'yyyymm')||
                       to_char(last_day(to_date(bas_pis_ym,'yyyymm')),'dd'),'yyyymmdd')
                       - 364, 'yyyymmdd')
            or a.job_cd in ('AC','A1','A2','A3','A4','A5','AB'))
      and a.OCC_CD  in ('0','1','2','3','8')
      and a.eno_no = d.eno_no(+)
      and a.eno_no = e.eno_no(+)
      and a.eno_no = f.eno_no(+)
      and a.eno_no = h.eno_no(+)
      and a.eno_no = i.eno_no(+)
      and a.eno_no = j.eno_no(+);


 BEGIN
      bas_pis_ym   := ?;
      bas_pis_yy   := substr(bas_pis_ym,1,4);
      bas_pis_mm   := substr(bas_pis_ym,5,2);
      bas_eno_no   := ?;

      bon_tot_pct  := 0;

      open pay_cur(bas_pis_ym);
           FETCH pay_cur INTO pay_str_mon;
      close pay_cur;

      open month_cur(bas_pis_ym, pay_str_mon);
           FETCH month_cur INTO mon_cnt;
      close month_cur;


      open yma_cur(bas_pis_ym);
           FETCH yma_cur INTO pay_yma_mon;
      close yma_cur;

      OPEN bon_cur(bas_pis_ym);
      LOOP
        FETCH bon_cur INTO bon_pis_yy, bon_pay_pct;
        if (bon_cur%notfound) then exit;
        end if;
        bon_tot_pct  := bon_tot_pct + nvl(bon_pay_pct,0);
        if bon_tot_pct >= 800 then exit;
        end if;
      END LOOP;
      CLOSE bon_cur;

       delete from t_ac_reserve where pis_yy = bas_pis_yy and pis_mm = bas_pis_mm;

       bon_tot_pct := 800; -- 2012년 이후 Zero

      OPEN ret_cur(bas_pis_ym,bas_pis_yy,bas_pis_mm,mon_cnt,bon_tot_pct,bon_pis_yy,pay_str_mon,pay_yma_mon);
      LOOP
        FETCH ret_cur INTO res_eno_no, res_eno_nm, res_cet_no, res_occ_cd, res_dpt_cd, res_job_cd,
                           res_hirr_ymd, res_lse_dd, res_tot_pay_amt, res_tot_bonus_amt,
                           res_pay_amt, res_bonus_amt, res_sch_amt, res_yma_amt, res_avg_amt, res_res_amt, res_reason;
        if (ret_cur%notfound) then exit;
        end if;

           INSERT INTO T_AC_RESERVE
                             ( PIS_YY
                             , PIS_MM
                             , ENO_NO
                             , ENO_NM
                             , CET_NO
                             , OCC_CD
                             , DPT_CD
                             , JOB_CD
                             , HIRR_YMD
                             , LSE_DD
                             , TOT_PAY_AMT      --최근 3개월 급여
                             , TOT_BONUS_AMT    --최근 800% 상여
                             , PAY_AMT          --당해년도 급여합
                             , BONUS_AMT        --당해년도 상여합
                             , SCH_AMT          --당해년도 학자금
                             , YMA_AMT          --연 월차
                             , AVG_AMT          --평균임금
                             , RES_AMT          --퇴직급여 충당금
                             , REASON
                             , IPT_MAN
                             , UPT_MAN
                             , IPT_YMD
                             , UPT_YMD)
                      VALUES ( bas_pis_yy
                             , bas_pis_mm
                             , res_eno_no
                             , res_eno_nm
                             , res_cet_no
                             , res_occ_cd
                             , res_dpt_cd
                             , res_job_cd
                             , res_hirr_ymd
                             , res_lse_dd
                             , res_tot_pay_amt
                             , res_tot_bonus_amt
                             , res_pay_amt
                             , res_bonus_amt
                             , res_sch_amt
                             , res_yma_amt
                             , res_avg_amt
                             , res_res_amt
                             , res_reason
                             , bas_eno_no
                             , bas_eno_no
                             , sysdate
                             , sysdate);
      END LOOP;
      CLOSE ret_cur;
 END;
            ]]>
        </query>
    </sql>

    <!-- 퇴직급여 충당금을 가져온다. -->
    <sql name="RETB010_PROC">
        <description>퇴직급여 충당금을 가져온다.(기존 쿼리 그대로 활용)</description>
        <query>
            <![CDATA[
            DECLARE

                --전 사원의 대상   --> 1년이상 재직자로 수정
                CURSOR PERSON_CUR (p_bas_ym VARCHAR2)
                IS
                    SELECT *
                    FROM   T_CM_PERSON

                  --WHERE  p_bas_ym BETWEEN TO_CHAR(HIR_YMD, 'YYYYMM')
                  --                    AND TO_CHAR(NVL(RET_YMD, SYSDATE), 'YYYYMM');

                    WHERE (RET_YMD IS NULL OR TO_CHAR(RET_YMD,'YYYYMMDD') >= P_BAS_YM||TO_CHAR(LAST_DAY(TO_DATE(P_BAS_YM,'YYYYMM')),'DD'))
                    AND    TO_CHAR(HIR_YMD,'YYYYMMDD') < TO_CHAR(TO_DATE(P_BAS_YM||TO_CHAR(LAST_DAY(TO_DATE(P_BAS_YM,'YYYYMM')),'DD'),'YYYYMMDD')-364, 'YYYYMMDD');

                --대상자 휴직 내역을 조회해 옵시다.
                CURSOR HISTORY_CUR (p_eno_no VARCHAR2)
                IS
                    SELECT *
                      FROM T_CM_AHISTORY
                     WHERE APP_CD = 'LN1'
                       AND ENO_NO = p_eno_no
                  ORDER BY END_YMD DESC;

                --상여 내역을 조회해 옵니다.
                CURSOR BONUS_CUR (p_eno_no VARCHAR2, p_bas_ymd VARCHAR2)
                IS
                    SELECT ROW_NUMBER() OVER(ORDER BY A.PIS_YY DESC
                                                    , A.PIS_MM DESC
                                                    , A.SAL_GBN DESC
                                                    , A.SEQ) AS NUM
                         , A.PIS_YY||'-'||A.PIS_MM AS PIS_YM
                         , A.SAL_GBN
                         , A.ENO_NO
                         , NVL(A.SALT_AMT,0)        AS SALT_AMT     -- 상여금
                         , NVL(A.BAS_PCT,0)         AS BAS_PCT      -- 상여금의 비율
                         , NVL(B.BPAY_PCT, 0)       AS BPAY_PCT     -- WORKLOG의 비율
                         , A.PIS_YY
                         , A.PIS_MM
                         , A.SEQ
                      FROM (SELECT E.OCC_CD
                                 , E.PIS_YY
                                 , E.PIS_MM
                                 , E.SAL_GBN
                                 , E.ENO_NO
                                 , E.SEQ
                                 , NVL(E.SALT_AMT  , 0) + NVL(F.SALT_AMT  , 0) AS SALT_AMT
                                 , E.BAS_PCT
                              FROM T_CP_PAYMASTER E   -- 상여 MASTER
                                 , T_CP_ADDPAY F      -- 소급 테이블
                             WHERE E.SAL_GBN  IN ('1', '4')
                               AND E.OCC_CD   = F.OCC_CD(+)
                               AND E.PIS_YY   = F.PIS_YY(+)
                               AND E.PIS_MM   = F.PIS_MM(+)
                               AND E.SAL_GBN  = F.SAL_GBN(+)
                               AND E.ENO_NO   = F.ENO_NO(+)
                               AND E.SEQ      = F.SEQ(+)
                            ) A
                         , T_CP_WORKLOG B
                         --정산기준일로 부터 일년전의 기간을 가지고  옴
                         , (SELECT TO_CHAR(ADD_MONTHS(SHR_YMD,-12), 'YYYYMM') AS FROM_YM
                                 , TO_CHAR(SHR_YMD, 'YYYYMM') AS TO_YM
                              FROM (SELECT TO_DATE(p_bas_ymd, 'YYYYMMDD') AS SHR_YMD
                                      FROM DUAL
                                    )
                            ) C
                     WHERE A.PIS_YY||A.PIS_MM BETWEEN C.FROM_YM
                                              AND C.TO_YM
                       AND A.ENO_NO     = p_eno_no
                       --상여의 비율이 'N'(미포함) 이 아닌것 과 월차인것 가지고 오기
                       AND ((A.SAL_GBN  = '1'
                       AND   NVL(B.RET_TAG, 'Y') != 'N')
                        OR   A.SAL_GBN  = '4')
                       AND A.OCC_CD     = B.OCC_CD
                       AND A.PIS_YY     = B.PIS_YY
                       AND A.PIS_MM     = B.PIS_MM
                       AND A.SAL_GBN    = B.SAL_GBN
                       AND A.SEQ        = B.SEQ;



                l_flag          VARCHAR2(1);
                l_str_ymd       VARCHAR2(8);
                l_bas_ymd       VARCHAR2(8);      --기준년월
                l_err_msg       VARCHAR2(32000);
                l_months        NUMBER;           --월수 계산에 필요한 임시변수
                l_days          NUMBER;           --3개월치 근무일수

                /* 급여 */
                l_pay_amt       NUMBER;

                /* 상여금 계산에 필요한변수들 */
                l_bonus_amt     NUMBER;
                l_salt_amt      NUMBER;
                l_bas_pct       NUMBER;
                l_tot_pct       NUMBER;
                l_cov_pct       NUMBER;

                /* 당해년도 급,상여 */
                l_year_pay      NUMBER;
                l_year_bonus    NUMBER;
                l_year_sch      NUMBER;

                /* 연월차 */
                l_yma_amt       NUMBER;

                /* 평균임금 */
                l_avg_amt       NUMBER;

                /* 퇴직급여 충당금 */
                l_res_amt       NUMBER;
                l_res_tot       NUMBER;

                /* 사유 */
                l_reason        VARCHAR2(60);

                in_pis_yy       VARCHAR2(4);
                in_pis_mm       VARCHAR2(2);
                in_pis_ym       VARCHAR2(6);
                in_eno_no       VARCHAR2(8);

            BEGIN
                l_err_msg := '';
                in_pis_ym := ?;
                in_pis_yy := SUBSTR(in_pis_ym, 1, 4);
                in_pis_mm := SUBSTR(in_pis_ym, 5, 2);
                in_eno_no := ?;

                --해당년도의 임시 저장 내역을 초기화 시킨 후 다시 입력
                DELETE
                  FROM T_AC_RESERVE_TMP
                 WHERE PIS_YY = in_pis_yy
                   AND PIS_MM = in_pis_mm;

                BEGIN
                    FOR vPERSON_REC IN PERSON_CUR (in_pis_ym)
                    LOOP
                        l_flag    := 'Y';
                        l_months  := 0;
                        l_bas_ymd := TO_CHAR(LAST_DAY(TO_DATE(in_pis_ym, 'YYYYMM')), 'YYYYMMDD');


                        --휴직 여부를 조회해서 기준일자를 다시 설정합시다.
                        --없으면 패스!!!
                        BEGIN
                            FOR vHISTORY_REC IN HISTORY_CUR (vPERSON_REC.ENO_NO)
                            LOOP

                                l_months := ROUND(MONTHS_BETWEEN(l_bas_ymd, vHISTORY_REC.END_YMD));
                                EXIT WHEN l_months >= 3;

                                --기준일자가 해당월 말일이 아니면 전달의 말일을 가지고 옵니다.
                                l_bas_ymd := vHISTORY_REC.STR_YMD;
                                IF  l_bas_ymd <> TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(l_bas_ymd, 1, 6), 'YYYYMM')), 'YYYYMMDD')
                                THEN
                                    l_bas_ymd := TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(l_bas_ymd, 'YYYYMMDD'), -1)), 'YYYYMMDD');
                                END IF;

                            END LOOP;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := '';
                        END;


                        --기준 시작일과 3개월치 근무일수를 가지고 옵시다.
                        l_str_ymd := TO_CHAR(ADD_MONTHS(TO_DATE(l_bas_ymd,'YYYYMMDD'),-2),'YYYYMM')||'01';
                        l_days    := LAST_DAY(TO_DATE(l_bas_ymd,'YYYYMMDD')) - TO_DATE(TO_CHAR(ADD_MONTHS(TO_DATE(l_bas_ymd,'YYYYMMDD'),-2),'YYYYMM')||'01','YYYYMMDD') + 1;


                        /**
                         * 1.-> 3개월 간의 급여를 가지고 옵시다.
                         */
                        l_pay_amt := 0;
                        BEGIN
                            SELECT A.SALT_AMT - NVL(B.AMT, 0) + NVL(C.AMT, 0) AS SALT_AMT
                              INTO l_pay_amt
                              FROM (SELECT ENO_NO
                                         ,   NVL( SUM(SALT_AMT ), 0)
                                           - NVL( SUM(SCH_AMT  ), 0)
                                           - NVL( SUM(WEL_POINT), 0) AS SALT_AMT
                                      FROM T_CP_PAYMASTER
                                     WHERE (PIS_YY||PIS_MM   BETWEEN SUBSTR(l_str_ymd, 1, 6) AND SUBSTR(l_bas_ymd, 1, 6))
                                       AND SAL_GBN  = '0'
                                       AND ENO_NO   = vPERSON_REC.ENO_NO
                                  GROUP BY ENO_NO
                                    ) A
                                 , (SELECT ENO_NO
                                         , SUM(AMOUNT) AS AMT
                                      FROM T_CP_CHANGE
                                     WHERE (PIS_YY||PIS_MM   BETWEEN SUBSTR(l_str_ymd, 1, 6) AND SUBSTR(l_bas_ymd, 1, 6))
                                       AND SAL_GBN  = '0'
                                       AND BACK_YY  IS NOT NULL
                                  GROUP BY ENO_NO
                                    ) B
                                 , (SELECT ENO_NO
                                         , SUM(AMOUNT) AS AMT
                                      FROM T_CP_CHANGE
                                     WHERE (PIS_YY||PIS_MM   BETWEEN SUBSTR(l_str_ymd, 1, 6) AND SUBSTR(l_bas_ymd, 1, 6))
                                       AND (BACK_YY||BACK_MM BETWEEN SUBSTR(l_str_ymd, 1, 6) AND SUBSTR(l_bas_ymd, 1, 6))
                                       AND BACK_GBN = '0'
                                  GROUP BY ENO_NO
                                    ) C
                             WHERE A.ENO_NO = B.ENO_NO(+)
                               AND A.ENO_NO = C.ENO_NO(+);
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := l_err_msg||CHR(13)||CHR(10)||'ENO_NO->'||vPERSON_REC.ENO_NO||' PAY_AMT IS NULL!!';
                        END;


                        /**
                         * 2.-> 상여 800%을 맞추기 위해 일단 값들을 1년치 가지고 옵니다.
                         */
                        l_bonus_amt :=0;
                        l_salt_amt  :=0;
                        l_bas_pct   :=0;
                        l_tot_pct   :=0;
                        l_cov_pct   :=0;
                        BEGIN
                            FOR vBONUS_REC IN BONUS_CUR(vPERSON_REC.ENO_NO, l_bas_ymd)
                            LOOP
                                l_salt_amt  := vBONUS_REC.SALT_AMT;
                                l_bas_pct   := vBONUS_REC.BPAY_PCT;

                                --비율이 800 이면 멈추고 비율이 800이 넘으면 넘은만큼의 비율로 마지막 데이터를 가지고 오고 800이 넘지 않으면 반복
                                IF vBONUS_REC.SAL_GBN = '1' AND l_tot_pct + l_bas_pct > 800
                                THEN
                                    l_cov_pct   := 800-l_tot_pct;
                                    l_bonus_amt := l_bonus_amt + (l_salt_amt/l_bas_pct*l_cov_pct);
                                    l_tot_pct   := 800;
                                ELSE
                                    l_bonus_amt := l_bonus_amt + l_salt_amt;
                                    l_tot_pct   := l_tot_pct + l_bas_pct;
                                END IF;

                                --비율이 800이 되면 종료 합시다.
                                EXIT WHEN l_tot_pct = 800;
                            END LOOP;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := l_err_msg||CHR(13)||CHR(10)||'ENO_NO->'||vPERSON_REC.ENO_NO||' BONUS_AMT IS NULL!!';
                        END;


                        /**
                         * 3.-> 당해년도 급여, 상여를 가지고 옵시다.
                         */
                        l_year_pay    := 0;
                        l_year_bonus  := 0;
                        l_year_sch    := 0;
                        BEGIN
                            SELECT NVL(MAX(DECODE(A.SAL_GBN, 0, A.SALT_AMT - NVL(B.AMT, 0) + NVL(C.AMT, 0))), 0)
                                 , NVL(MAX(DECODE(A.SAL_GBN, 1, A.SALT_AMT - NVL(B.AMT, 0) + NVL(C.AMT, 0))), 0)
                                 , NVL(SUM(A.SCH_AMT), 0)
                              INTO l_year_pay
                                 , l_year_bonus
                                 , l_year_sch
                              FROM (SELECT ENO_NO
                                         ,   NVL( SUM(SALT_AMT ), 0)
                                           - NVL( SUM(SCH_AMT  ), 0)
                                           - NVL( SUM(WEL_POINT), 0)  AS SALT_AMT
                                         , NVL(SUM(SCH_AMT),0)        AS SCH_AMT
                                         , SAL_GBN
                                      FROM T_CP_PAYMASTER
                                     WHERE PIS_YY   = in_pis_yy
                                       AND PIS_MM  <= in_pis_mm
                                       AND SAL_GBN  IN ('0', '1')
                                       AND ENO_NO   = vPERSON_REC.ENO_NO
                                  GROUP BY ENO_NO
                                         , SAL_GBN
                                    ) A
                                  ,(SELECT ENO_NO
                                         , SUM(AMOUNT) AMT
                                         , SAL_GBN
                                      FROM T_CP_CHANGE
                                     WHERE PIS_YY   = in_pis_yy
                                       AND PIS_MM  <= in_pis_mm
                                       AND SAL_GBN  IN ('0', '1')
                                       AND BACK_YY  = in_pis_yy
                                  GROUP BY ENO_NO
                                         , SAL_GBN
                                    ) B
                                  ,(SELECT ENO_NO
                                         , SUM(AMOUNT) AMT
                                         , SAL_GBN
                                      FROM T_CP_CHANGE
                                     WHERE PIS_YY   = in_pis_yy
                                       AND PIS_MM  <= in_pis_mm
                                       AND BACK_GBN IN ('0', '1')
                                       AND BACK_YY  = in_pis_yy
                                       AND BACK_MM <= in_pis_mm
                                  GROUP BY ENO_NO
                                         , SAL_GBN
                                    ) C
                             WHERE A.ENO_NO     = B.ENO_NO(+)
                               AND A.SAL_GBN    = B.SAL_GBN(+)
                               AND A.ENO_NO     = C.ENO_NO(+)
                               AND A.SAL_GBN    = C.SAL_GBN(+);

                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := l_err_msg||CHR(13)||CHR(10)||'ENO_NO->'||vPERSON_REC.ENO_NO||' YEAR_AMT IS NULL!!';
                        END;



                        /**
                         * 4.-> 연월차를 가지고 옵시다.
                         */
                        l_yma_amt := 0;
                        BEGIN

                            SELECT NVL(SUM(SALT_AMT), 0)
                              INTO l_yma_amt
                              FROM T_CP_PAYMASTER
                             WHERE ENO_NO = vPERSON_REC.ENO_NO
                               AND PIS_YY||PIS_MM = (SELECT MAX(PIS_YY||PIS_MM)
                                                       FROM T_CP_WORKLOG
                                                      WHERE PIS_YY||PIS_MM <= in_pis_ym
                                                        AND SAL_GBN = '4'
                                                        AND OCC_CD  = 'A'
                                                     )
                               AND SAL_GBN = '4';

                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := l_err_msg||CHR(13)||CHR(10)||'ENO_NO->'||vPERSON_REC.ENO_NO||' YMA_AMT IS NULL!!';
                        END;



                        /**
                         * 5.-> 평균임금을 계산해서 옵시다.
                         */
                        l_avg_amt := CEIL( l_pay_amt * 30 / l_days) + CEIL((l_bonus_amt + l_yma_amt)/12);



                        /**
                         * 6.-> 퇴직급여 충당금을 계산해 옵시다.
                         */
                        SELECT CEIL( l_avg_amt
                                   * ROUND((TO_DATE(l_bas_ymd, 'YYYYMMDD') - NVL(vPERSON_REC.HIRR_YMD, vPERSON_REC.HIR_YMD) + 1)/365, 2)
                                   * DECODE( vPERSON_REC.JOB_CD
                                           , 'AB', 2.5
                                           , 'A5', 2.5
                                           , 'A4', 3
                                           , 'A3', 3
                                           , 'A2', 4
                                           , 'A1', 4
                                           , 'AC', 4
                                           , 'A7', 0
                                           , 'AA', 0
                                           , 1
                                             )
                                     )
                          INTO l_res_amt
                          FROM DUAL;


                        /**
                         * 6.-> 사유를 가지고 옵시다.
                         */
                        SELECT DECODE( vPERSON_REC.JOB_CD
                                     , 'AB', '가중치 2.5배'
                                     , 'A5', '가중치 2.5배'
                                     , 'A4', '가중치 3배'
                                     , 'A3', '가중치 3배'
                                     , 'A2', '가중치 4배'
                                     , 'A1', '가중치 4배'
                                     , 'AC', '가중치 4배'
                                     , 'A7', '퇴직금 제외'
                                     , 'AA', '퇴직금 제외'
                                     ,''
                                       )
                          INTO l_reason
                          FROM DUAL;



                        /**
                         * 8.-> 충당금 총액을 가지고 옵시다.
                         */
                        l_res_tot := 0;

                        BEGIN

                            SELECT NVL(A.TOT_RES_AMT, 0)
                                      + NVL(A.MON_RES_AMT, 0)
                                      - NVL(B.RET_AMT, 0)
                              INTO l_res_tot
                              FROM T_AC_RESERVE  A
                                 , T_AC_RETTABLE B
                                 , (SELECT ENO_NO
                                         , PIS_YM
                                         , SUBSTR(PRE_YM, 1, 4)       AS PRE_YY
                                         , SUBSTR(PRE_YM ,5, 2)       AS PRE_MM
                                      FROM (SELECT in_pis_ym          AS PIS_YM
                                                 , TO_CHAR(ADD_MONTHS(TO_DATE(in_pis_ym, 'YYYYMM'), -1), 'YYYYMM') AS PRE_YM
                                                 , vPERSON_REC.ENO_NO AS ENO_NO
                                              FROM DUAL
                                            )
                                    ) C
                             WHERE C.ENO_NO     = A.ENO_NO(+)
                               AND C.PRE_YY     = A.PIS_YY(+)
                               AND C.PRE_MM     = A.PIS_MM(+)
                               AND C.ENO_NO     = B.ENO_NO(+)
                               AND C.PIS_YM     = B.PRO_YM(+);

                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN l_err_msg := l_err_msg||CHR(13)||CHR(10)||'ENO_NO->'||vPERSON_REC.ENO_NO||' RES_AMT IS NULL!!';
                        END;


                        --DBMS_OUTPUT.PUT_LINE(l_days||',   '||l_bas_ymd||',   '||l_pay_amt||',   '||l_bonus_amt||',   '||l_year_pay||',   '||l_year_bonus||',   '||l_year_sch||',   '||l_yma_amt||',   '||l_avg_amt||',   '||l_res_amt||',   '||l_res_tot||',   '||(l_res_amt - l_res_tot)||',   '||l_reason);



                        /**
                         * 9.-> 임시테이블에 계산한 내용을 등록 합시다.
                         */
                        INSERT
                          INTO T_AC_RESERVE_TMP
                             ( PIS_YY
                             , PIS_MM
                             , ENO_NO
                             , ENO_NM
                             , CET_NO
                             , OCC_CD
                             , DPT_CD
                             , JOB_CD
                             , HIRR_YMD
                             , LSE_DD
                             , BAS_YMD
                             , TOT_PAY_AMT      --최근 3개월 급여
                             , TOT_BONUS_AMT    --최근 800% 상여
                             , PAY_AMT          --당해년도 급여합
                             , BONUS_AMT        --당해년도 상여합
                             , SCH_AMT          --당해년도 학자금
                             , YMA_AMT          --연 월차
                             , AVG_AMT          --평균임금
                             , RES_AMT          --퇴직급여 충당금
                             , TOT_RES_AMT      --충당금 전월누계
                             , MON_RES_AMT      --당월 충당금
                             , REASON
                             , IPT_MAN
                             , UPT_MAN
                             , IPT_YMD
                             , UPT_YMD)
                      VALUES ( in_pis_yy
                             , in_pis_mm
                             , vPERSON_REC.ENO_NO
                             , vPERSON_REC.ENO_NM
                             , vPERSON_REC.CET_NO
                             , vPERSON_REC.OCC_CD
                             , vPERSON_REC.DPT_CD
                             , vPERSON_REC.JOB_CD
                             , vPERSON_REC.HIRR_YMD

                             -- 근속월수를 일수로 변경
                             --, TRUNC(MONTHS_BETWEEN(TO_DATE(in_pis_yy||in_pis_mm||(to_char(last_day(to_date(in_pis_yy||in_pis_mm,'YYYYMM')),'DD')),'YYYYMMDD'),NVL(VPERSON_REC.HIRR_YMD,VPERSON_REC.HIR_YMD)-1))
                             , TO_DATE(in_pis_yy||in_pis_mm||(TO_CHAR(LAST_DAY(TO_DATE(in_pis_yy||in_pis_mm,'YYYYMM')),'DD')),'YYYYMMDD') - NVL(VPERSON_REC.HIRR_YMD,VPERSON_REC.HIR_YMD) + 1

                             , l_bas_ymd
                             , l_pay_amt
                             , l_bonus_amt
                             , l_year_pay
                             , l_year_bonus
                             , l_year_sch
                             , l_yma_amt
                             , l_avg_amt
                             , l_res_amt
                             , l_res_tot
                             , l_res_amt - l_res_tot
                             , l_reason
                             , in_eno_no
                             , in_eno_no
                             , SYSDATE
                             , SYSDATE );

                    END LOOP;

                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN l_err_msg := l_err_msg||'대상자 리스트 조회가 되지 않았습니다.';
                END;


                -->에러 로그 조회
                DBMS_OUTPUT.ENABLE(100000000); --버퍼사이즈 늘렸다.
                DBMS_OUTPUT.PUT_LINE(l_err_msg);

            END;
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETB030
* @description : 개인별지급소득내역
***********************************************************************
* 2007/04/12     조정호       최초작성
***********************************************************************
-->

    <!-- 개인별지급소득내역 조회 -->
    <sql name="RETB030_SHR1">
        <description>개인별지급소득내역 조회</description>
        <query>
            <![CDATA[
            select case when ret_ymd is not null and ret_ymd <= to_date(?,'yyyymmdd') then '퇴직자'
                        when hir_ymd <= to_date(?,'yyyymmdd')-365 then '1년이상'
                        else '1년미만' end tag,
                   sf_get_commname('01','A1',a.occ_cd) occ_nm,
                   sf_get_dptname('01','A4',a.dpt_cd) dpt_nm,
                   sf_get_commname('01','A2',a.job_cd) job_nm,
                   a.eno_no, a.eno_nm, a.cet_no,
                   to_char(hir_ymd,'yyyy-mm-dd') hir_ymd,
                   to_char(ret_ymd,'yyyy-mm-dd') ret_ymd,
                   c.salt_amt pay_amt, d.salt_amt bon_amt, e.salt_amt yma_amt, c.sch_amt, c.wel_point,
                   f.pay_1, g.bon_1, f.pay_2, g.bon_2, f.pay_3, g.bon_3, f.pay_4, g.bon_4,
                   f.pay_5, g.bon_5, f.pay_6, g.bon_6, f.pay_7, g.bon_7, f.pay_8, g.bon_8,
                   f.pay_9, g.bon_9, f.pay_10, g.bon_10, f.pay_11, g.bon_11, f.pay_12, g.bon_12

              from t_cm_person a,
                  (select distinct(eno_no) eno_no from t_cp_paymaster where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2)) b,
                  (select eno_no, sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt,  sum(NVL(sch_amt,0)) sch_amt, sum(NVL(wel_point,0)) wel_point
                     from t_cp_paymaster where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2) and sal_gbn = '0' group by eno_no) c,
                  (select eno_no, sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt
                     from t_cp_paymaster where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2) and sal_gbn = '1' group by eno_no) d,
                  (select eno_no, salt_amt
                     from t_cp_paymaster
                    where pis_yy||pis_mm = (select max(pis_yy||pis_mm) from t_cp_worklog where sal_gbn = '4' and pis_yy||pis_mm <= substr(?,1,6))
                      and sal_gbn = '4') e,
                  (select eno_no,
                          max(decode(pis_mm,'01',salt_amt,0)) pay_1,
                          max(decode(pis_mm,'02',salt_amt,0)) pay_2,
                          max(decode(pis_mm,'03',salt_amt,0)) pay_3,
                          max(decode(pis_mm,'04',salt_amt,0)) pay_4,
                          max(decode(pis_mm,'05',salt_amt,0)) pay_5,
                          max(decode(pis_mm,'06',salt_amt,0)) pay_6,
                          max(decode(pis_mm,'07',salt_amt,0)) pay_7,
                          max(decode(pis_mm,'08',salt_amt,0)) pay_8,
                          max(decode(pis_mm,'09',salt_amt,0)) pay_9,
                          max(decode(pis_mm,'10',salt_amt,0)) pay_10,
                          max(decode(pis_mm,'11',salt_amt,0)) pay_11,
                          max(decode(pis_mm,'12',salt_amt,0)) pay_12
                     from (select eno_no, pis_mm, sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt
                             from t_cp_paymaster where pis_yy = substr(?,1,4) and sal_gbn = '0' group by pis_mm, eno_no)
                 group by eno_no) f,
                  (select eno_no,
                          max(decode(pis_mm,'01',salt_amt,0)) bon_1,
                          max(decode(pis_mm,'02',salt_amt,0)) bon_2,
                          max(decode(pis_mm,'03',salt_amt,0)) bon_3,
                          max(decode(pis_mm,'04',salt_amt,0)) bon_4,
                          max(decode(pis_mm,'05',salt_amt,0)) bon_5,
                          max(decode(pis_mm,'06',salt_amt,0)) bon_6,
                          max(decode(pis_mm,'07',salt_amt,0)) bon_7,
                          max(decode(pis_mm,'08',salt_amt,0)) bon_8,
                          max(decode(pis_mm,'09',salt_amt,0)) bon_9,
                          max(decode(pis_mm,'10',salt_amt,0)) bon_10,
                          max(decode(pis_mm,'11',salt_amt,0)) bon_11,
                          max(decode(pis_mm,'12',salt_amt,0)) bon_12
                     from (select eno_no, pis_mm, sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt
                             from t_cp_paymaster where pis_yy = substr(?,1,4) and sal_gbn = '1' group by pis_mm, eno_no)
                 group by eno_no) g
              where a.eno_no = b.eno_no
                and b.eno_no = c.eno_no(+)
                and b.eno_no = d.eno_no(+)
                and b.eno_no = e.eno_no(+)
                and b.eno_no = f.eno_no(+)
                and b.eno_no = g.eno_no(+)
                and a.dpt_cd = nvl(? ,a.dpt_cd)
                and a.eno_no = nvl(? ,a.eno_no)
           order by tag, a.occ_cd, sf_get_dptseq('01','A4',a.dpt_cd), sf_get_commname('01','A2',a.job_cd)

            ]]>
        </query>
    </sql>


    <!-- 개인별지급소득내역 조회 -->
    <sql name="RETB030_SHR">
        <description>개인별지급소득내역 조회</description>
        <query>
            <![CDATA[
            SELECT CASE
                   WHEN A.RET_YMD IS NOT NULL
                    AND TO_CHAR(A.RET_YMD, 'YYYYMMDD') < TO_CHAR(B.PIS_YMD, 'YYYYMMDD')
                   THEN '퇴직자'
                   WHEN TO_CHAR(A.HIR_YMD, 'YYYYMMDD') > TO_CHAR(ADD_MONTHS(B.PIS_YMD, -12), 'YYYYMMDD')
                   THEN '1년미만'
                   ELSE '1년이상'
                    END AS TAG
                 , A.ENO_NM
                 , A.OCC_CD
                 , SF_GET_COMMNAME('01','A1',A.OCC_CD) OCC_NM
                 , A.CET_NO
                 , A.DPT_CD
                 , SF_GET_DPTNAME('01','A4',A.DPT_CD)  DPT_NM
                 , A.JOB_CD
                 , SF_GET_COMMNAME('01','A2',A.JOB_CD) JOB_NM
                 , B.*
              FROM T_CM_PERSON A
                 , (SELECT D.ENO_NO
                         , D.PIS_YMD

                         , NVL((SELECT SUM(NVL(SALT_AMT, 0))
                                  FROM T_CP_PAYMASTER
                                 WHERE SAL_GBN = '4'
                                   AND ENO_NO = D.ENO_NO
                                   AND PIS_YY = ?
                                ), 0
                               )                    AS YMA_AMT_TOT      -- 년월차 수당

                         , SUM(NVL(E.SALT_AMT, 0))  AS PAY_AMT_TOT      -- 급여 총합
                         , SUM(NVL(F.SALT_AMT, 0))  AS BONUS_AMT_TOT    -- 상여 총합
                         , SUM(NVL(E.ETC_AMT, 0))   AS ETC_AMT_TOT      -- 기타 수당 총합

                         , NVL(MAX(DECODE(E.PIS_MM, '01', E.SALT_AMT)), 0) AS PAY_AMT_1
                         , NVL(MAX(DECODE(E.PIS_MM, '02', E.SALT_AMT)), 0) AS PAY_AMT_2
                         , NVL(MAX(DECODE(E.PIS_MM, '03', E.SALT_AMT)), 0) AS PAY_AMT_3
                         , NVL(MAX(DECODE(E.PIS_MM, '04', E.SALT_AMT)), 0) AS PAY_AMT_4
                         , NVL(MAX(DECODE(E.PIS_MM, '05', E.SALT_AMT)), 0) AS PAY_AMT_5
                         , NVL(MAX(DECODE(E.PIS_MM, '06', E.SALT_AMT)), 0) AS PAY_AMT_6
                         , NVL(MAX(DECODE(E.PIS_MM, '07', E.SALT_AMT)), 0) AS PAY_AMT_7
                         , NVL(MAX(DECODE(E.PIS_MM, '08', E.SALT_AMT)), 0) AS PAY_AMT_8
                         , NVL(MAX(DECODE(E.PIS_MM, '09', E.SALT_AMT)), 0) AS PAY_AMT_9
                         , NVL(MAX(DECODE(E.PIS_MM, '10', E.SALT_AMT)), 0) AS PAY_AMT_10
                         , NVL(MAX(DECODE(E.PIS_MM, '11', E.SALT_AMT)), 0) AS PAY_AMT_11
                         , NVL(MAX(DECODE(E.PIS_MM, '12', E.SALT_AMT)), 0) AS PAY_AMT_12

                         , NVL(MAX(DECODE(F.PIS_MM, '01', F.SALT_AMT)), 0) AS BONUS_AMT_1
                         , NVL(MAX(DECODE(F.PIS_MM, '02', F.SALT_AMT)), 0) AS BONUS_AMT_2
                         , NVL(MAX(DECODE(F.PIS_MM, '03', F.SALT_AMT)), 0) AS BONUS_AMT_3
                         , NVL(MAX(DECODE(F.PIS_MM, '04', F.SALT_AMT)), 0) AS BONUS_AMT_4
                         , NVL(MAX(DECODE(F.PIS_MM, '05', F.SALT_AMT)), 0) AS BONUS_AMT_5
                         , NVL(MAX(DECODE(F.PIS_MM, '06', F.SALT_AMT)), 0) AS BONUS_AMT_6
                         , NVL(MAX(DECODE(F.PIS_MM, '07', F.SALT_AMT)), 0) AS BONUS_AMT_7
                         , NVL(MAX(DECODE(F.PIS_MM, '08', F.SALT_AMT)), 0) AS BONUS_AMT_8
                         , NVL(MAX(DECODE(F.PIS_MM, '09', F.SALT_AMT)), 0) AS BONUS_AMT_9
                         , NVL(MAX(DECODE(F.PIS_MM, '10', F.SALT_AMT)), 0) AS BONUS_AMT_10
                         , NVL(MAX(DECODE(F.PIS_MM, '11', F.SALT_AMT)), 0) AS BONUS_AMT_11
                         , NVL(MAX(DECODE(F.PIS_MM, '12', F.SALT_AMT)), 0) AS BONUS_AMT_12
                      FROM (SELECT LAST_DAY(TO_DATE(?, 'YYYYMMDD')) AS PIS_YMD   -- 기준년월
                                 , PIS_YY
                                 , PIS_MM
                                 , ENO_NO
                              FROM T_CP_PAYMASTER
                             WHERE PIS_YY = SUBSTR(?, 1, 4)
                               AND DPT_CD = NVL(?, DPT_CD)
                               AND ENO_NO = NVL(?, ENO_NO)
                          GROUP BY PIS_YY
                                 , PIS_MM
                                 , ENO_NO
                            ) D

                         , (SELECT I.ENO_NO
                                 , I.PIS_YY
                                 , I.PIS_MM
                                 , SUM( NVL(I.SGF_AMT, 0)
                                      + NVL(I.TB3_AMT, 0)
                                 --     - NVL(I.OTH_AMT, 0)
                                      + NVL(I.OTH_AMT, 0)
                                        )
                                 --  +(SELECT SUM(DECODE(J.SAL_CD,'BD',NVL(J.AMOUNT,0) * DECODE(J.AD_TAG, 'A', 1, 'D', -1),0)) --공항근무수당
                                 --          +SUM(DECODE(J.SAL_CD,'AB',NVL(J.AMOUNT,0) * DECODE(J.AD_TAG, 'A', 1, 'D', -1),0)) --휴일근무수당
                                 --    FROM   T_CP_CHANGE J
                                 --    WHERE  I.ENO_NO  = J.ENO_NO
                                 --    AND    I.PIS_YY  = J.PIS_YY
                                 --    AND    I.PIS_MM  = J.PIS_MM
                                 --    AND    J.SAL_GBN = '0'
                                 --    AND    J.BON_NUM = '1')
                                   AS ETC_AMT  -- 기타 수당

                                 , SUM(NVL(I.SALT_AMT, 0))
                                 --  + NVL((SELECT SUM(AMOUNT)
                                 --           FROM T_CP_CHANGE CHANGE
                                 --         WHERE SAL_CD IN ('DA')
                                 --            AND BACK_GBN = '0'
                                 --            AND ENO_NO  = I.ENO_NO
                                 --            AND BACK_YY = I.PIS_YY
                                 --            AND BACK_MM = I.PIS_MM), 0)
                                   AS SALT_AMT -- 급여
                              FROM T_CP_PAYMASTER I
                             WHERE I.SAL_GBN = '0'
                          GROUP BY I.ENO_NO
                                 , I.PIS_YY
                                 , I.PIS_MM
                            ) E

                         , (SELECT I.ENO_NO
                                 , I.PIS_YY
                                 , I.PIS_MM
                                 , SUM(NVL(I.SALT_AMT, 0))
                                 --  + NVL((SELECT SUM(AMOUNT) AS ADD_AMT
                                 --           FROM T_CP_CHANGE CHANGE
                                 --          WHERE SAL_CD IN ('DA')
                                 --            AND BACK_GBN = '1'
                                 --            AND ENO_NO  = I.ENO_NO
                                 --            AND BACK_YY = I.PIS_YY
                                 --            AND BACK_MM = I.PIS_MM), 0)
                                   AS SALT_AMT -- 상여
                              FROM T_CP_PAYMASTER I
                             WHERE I.SAL_GBN = '1'
                          GROUP BY I.ENO_NO
                                 , I.PIS_YY
                                 , I.PIS_MM
                            ) F

                     WHERE D.ENO_NO = E.ENO_NO(+)
                       AND D.PIS_YY = E.PIS_YY(+)
                       AND D.PIS_MM = E.PIS_MM(+)
                       AND D.ENO_NO = F.ENO_NO(+)
                       AND D.PIS_YY = F.PIS_YY(+)
                       AND D.PIS_MM = F.PIS_MM(+)
                  GROUP BY D.ENO_NO
                         , D.PIS_YMD
                         , D.PIS_YY
                    ) B
             WHERE A.ENO_NO = B.ENO_NO
          ORDER BY CASE
                   WHEN A.RET_YMD IS NOT NULL
                    AND TO_CHAR(A.RET_YMD, 'YYYYMMDD') < TO_CHAR(B.PIS_YMD, 'YYYYMMDD')
                   THEN 3
                   WHEN TO_CHAR(A.HIR_YMD, 'YYYYMMDD') > TO_CHAR(ADD_MONTHS(B.PIS_YMD, -12), 'YYYYMMDD')
                   THEN 1
                   ELSE 2
                    END
                 , A.OCC_CD
                 , SF_GET_DPTSEQ('01','A4',A.DPT_CD)
                 , SF_GET_COMMSEQ('01','A2',A.JOB_CD)
            ]]>
        </query>
    </sql>



<!--
***********************************************************************
* @UseCase     : RETB040
* @description : 계정별지급소득내역
***********************************************************************
* 2007/04/12     조정호       최초작성
***********************************************************************
-->

    <!-- 계정별지급소득내역 조회 -->
    <sql name="RETB040_SHR">
        <description>계정별지급소득내역 조회</description>
        <query>
            <![CDATA[
            SELECT DECODE( TAG
                         , '1', '1년미만'
                         , '2', '1년이상'
                         , '3', '퇴직자'
                         , '4', '합계' ) AS GBN
                 , SF_GET_COMMNAME('01', 'A1', OCC_CD) AS OCC_NM
                 , DECODE( SAL_GBN
                         , '0', '급여'
                         , '1', '상여'
                         , '4', '연월차' ) AS TYPE
                 , ENO_CNT
                 , SALT_AMT_TOT
              FROM (SELECT TAG
                         , OCC_CD
                         , SAL_GBN
                         , COUNT(ENO_NO) AS ENO_CNT
                         , SUM(SALT_AMT) AS SALT_AMT_TOT
                      FROM (SELECT CASE
                                   WHEN J.RET_YMD IS NOT NULL
                                    AND TO_CHAR(J.RET_YMD, 'YYYYMMDD') < TO_CHAR(K.PIS_YMD, 'YYYYMMDD')
                                   THEN '3' -- 퇴직자
                                   WHEN TO_CHAR(J.HIR_YMD, 'YYYYMMDD') > TO_CHAR(ADD_MONTHS(K.PIS_YMD, -12), 'YYYYMMDD')
                                   THEN '1' -- 1년미만
                                   ELSE '2' -- 1년이상
                                    END AS TAG
                                 , J.OCC_CD
                                 , J.ENO_NO
                                 , I.SAL_GBN
                                 , SUM(NVL(I.SALT_AMT, 0)) AS SALT_AMT -- 기본금
                              FROM (SELECT ENO_NO
                                         , SAL_GBN
                                         , PIS_YY
                                         , PIS_MM
                                         , CASE WHEN SAL_GBN = '0'
                                                THEN NVL(SALT_AMT, 0)
                                                WHEN SAL_GBN = '1'
                                                THEN NVL(SALT_AMT, 0)
                                                WHEN SAL_GBN = '4'
                                                THEN NVL(SALT_AMT, 0)
                                           END  AS SALT_AMT
                                      FROM T_CP_PAYMASTER H
                                     WHERE SAL_GBN IN ('0','1','4') ) I
                                 , VI_T_CM_PERSON2 J
                                 , (SELECT LAST_DAY(TO_DATE(?, 'YYYYMMDD')) AS PIS_YMD
                                      FROM DUAL
                                    ) K
                             WHERE I.ENO_NO = J.ENO_NO
                                    --급여,상여
                               AND ((I.SAL_GBN IN ('0', '1')
                               AND   I.PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY'))
                                    --년월차
                                OR  (I.SAL_GBN = '4'
                               AND   ((PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY')+1
                               AND     PIS_MM = '01')
                                OR    (PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY')
                               AND     PIS_MM = '12'))))
                          GROUP BY CASE
                                   WHEN J.RET_YMD IS NOT NULL
                                    AND TO_CHAR(J.RET_YMD, 'YYYYMMDD') < TO_CHAR(K.PIS_YMD, 'YYYYMMDD')
                                   THEN '3'
                                   WHEN TO_CHAR(J.HIR_YMD, 'YYYYMMDD') > TO_CHAR(ADD_MONTHS(K.PIS_YMD, -12), 'YYYYMMDD')
                                   THEN '1'
                                   ELSE '2'
                                    END
                                 , J.OCC_CD
                                 , J.ENO_NO
                                 , I.SAL_GBN
                            )
                  GROUP BY TAG
                         , OCC_CD
                         , SAL_GBN

                     UNION
                    --총합을 가져옵시다.
                    SELECT '4' AS TAG
                         , ''
                         , SAL_GBN
                         , COUNT(ENO_NO) AS ENO_CNT
                         , SUM(SALT_AMT) AS SALT_AMT_TOT
                      FROM (SELECT J.ENO_NO
                                 , I.SAL_GBN
                                 , SUM(NVL(I.SALT_AMT, 0)) AS SALT_AMT -- 기본금
                              FROM (SELECT ENO_NO
                                         , SAL_GBN
                                         , PIS_YY
                                         , PIS_MM
                                         , CASE WHEN SAL_GBN = '0'
                                                THEN NVL(SALT_AMT, 0)
                                                WHEN SAL_GBN = '1'
                                                THEN NVL(SALT_AMT, 0)
                                                WHEN SAL_GBN = '4'
                                                THEN NVL(SALT_AMT, 0)
                                           END  AS SALT_AMT
                                      FROM T_CP_PAYMASTER H
                                     WHERE SAL_GBN IN ('0','1','4') ) I
                                 , VI_T_CM_PERSON2 J
                                 , (SELECT LAST_DAY(TO_DATE(?, 'YYYYMMDD')) AS PIS_YMD
                                      FROM DUAL
                                    ) K
                             WHERE I.ENO_NO = J.ENO_NO
                                    --급여,상여
                               AND ((I.SAL_GBN IN ('0', '1')
                               AND   I.PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY'))
                                    --년월차
                                OR  (I.SAL_GBN = '4'
                               AND   ((PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY')+1
                               AND     PIS_MM = '01')
                                OR    (PIS_YY = TO_CHAR(K.PIS_YMD, 'YYYY')
                               AND     PIS_MM = '12'))))
                          GROUP BY J.ENO_NO
                                 , I.SAL_GBN
                            )
                  GROUP BY SAL_GBN
                    )
          ORDER BY TAG
                 , OCC_CD
                 , SAL_GBN
            ]]>
        </query>
    </sql>


    <!-- 계정별지급소득내역 조회 -->
    <sql name="RETB040_SHR1">
        <description>계정별지급소득내역 조회</description>
        <query>
            <![CDATA[
            select '1년미만' gbn ,sf_get_commname('01','A1',occ_cd) occ_nm,
                    sf_get_commname('01','A9',sal_gbn) type, count(distinct(eno_no)) eno_cnt,
                    sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt_tot
              from t_cp_paymaster
             where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2)
               and eno_no in (select eno_no from t_cm_person
                               where not (ret_ymd is not null and ret_ymd <= to_date(?,'yyyymmdd') or
                                          hir_ymd <= to_date(?,'yyyymmdd')-365))
          group by occ_cd, sal_gbn

          union

            select '1년이상' gbn ,sf_get_commname('01','A1',occ_cd) occ_nm,
                    sf_get_commname('01','A9',sal_gbn) type, count(distinct(eno_no)) eno_cnt,
                    sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt_tot
              from t_cp_paymaster
             where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2)
               and eno_no in (select eno_no from t_cm_person
                             where ret_ymd is null and hir_ymd <= to_date(?,'yyyymmdd')-365)
          group by occ_cd, sal_gbn

          union

            select '퇴직자' gbn ,sf_get_commname('01','A1',occ_cd) occ_nm,
                   sf_get_commname('01','A9',sal_gbn) type, count(distinct(eno_no)) eno_cnt,
                  sum(NVL(salt_amt,0)) - sum(NVL(sch_amt,0)) - sum(NVL(wel_point,0)) salt_amt_tot
              from t_cp_paymaster
             where pis_yy = substr(?,1,4) and pis_mm <= substr(?,5,2)
               and eno_no in (select eno_no from t_cm_person
                               where ret_ymd is not null and ret_ymd <= to_date(?,'yyyymmdd'))
          group by occ_cd, sal_gbn

            ]]>
        </query>
    </sql>




<!--
***********************************************************************
* @UseCase     : RETC020
* @description : 보험회사 명부입력
***********************************************************************
* 2007/04/04     조정호       최초작성
***********************************************************************
-->
    <!-- 보험회사구분코드 조회 -->
    <!-- 프레임웍으론 조회 해 올수 없음 별도 구현 -->
    <sql name="RETC020_ITM_SHR">
        <description>보험회사구분코드 조회</description>
        <query>
            <![CDATA[
        	SELECT CD_GBN
        		  ,COMM_CD AS CODE
        		  ,COMM_NM AS CODE_NAME
        	  FROM T_CM_COMMON
        	 WHERE CD_GBN = 'BR'
          ORDER BY SORT_NO
            ]]>
        </query>
    </sql>


    <!-- 명부 리스트 조회 -->
    <sql name="RETC020_SHR">
        <description>명부 리스트 조회</description>
        <query>
            <![CDATA[
             SELECT PIS_YY
                  , BNK_CD
                  , SF_GET_COMMNAME('01', 'BR', BNK_CD) AS BNK_NM
                  , ENO_NM
                  , CET_NO
                  , TO_CHAR(HIRG_YMD, 'YYYY-MM-DD') AS HIRG_YMD
                  , TO_CHAR(RAM_YMD,  'YYYY-MM-DD') AS RAM_YMD
                  , PAY_AMT
                  , EXP_AMT
                  , RES_AMT
                  , 0 AS STATUS
               FROM T_AC_RETINSURANCE
              WHERE PIS_YY = ?
                AND BNK_CD = ?
            ]]>
        </query>
    </sql>

    <!-- 명부 리스트 조회 -->
    <sql name="RETC020_CNT">
        <description>명부 리스트 조회</description>
        <query>
            <![CDATA[
             SELECT TO_CHAR(COUNT(*)) AS CNT
               FROM T_AC_RETINSURANCE
              WHERE PIS_YY = ?
                AND BNK_CD = ?
                AND CET_NO = ?
            ]]>
        </query>
    </sql>

    <!-- 명부 내역 등록 -->
    <sql name="RETC020_INS">
        <description>명부 내역 등록</description>
        <query>
            <![CDATA[
             INSERT
               INTO T_AC_RETINSURANCE
                    (PIS_YY
                    ,BNK_CD
                    ,ENO_NM
                    ,CET_NO
                    ,HIRG_YMD
                    ,RAM_YMD
                    ,PAY_AMT
                    ,EXP_AMT
                    ,RES_AMT
                    ,IPT_MAN
                    ,UPT_MAN
                    ,IPT_YMD
                    ,UPT_YMD)
             VALUES (?
                    ,?
                    ,?
                    ,?
                    ,TO_DATE(?)
                    ,TO_DATE(?)
                    ,?
                    ,?
                    ,?
                    ,?
                    ,?
                    ,SYSDATE
                    ,SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 명부 내역 수정 -->
    <sql name="RETC020_UPT">
        <description>명부 내역 수정</description>
        <query>
            <![CDATA[
              UPDATE T_AC_RETINSURANCE
                 SET HIRG_YMD   = ?
                    ,RAM_YMD    = ?
                    ,PAY_AMT    = ?
                    ,EXP_AMT    = ?
                    ,RES_AMT    = ?
                    ,UPT_MAN    = ?
               WHERE PIS_YY     = ?
                 AND BNK_CD     = ?
                 AND CET_NO     = ?
            ]]>
        </query>
    </sql>

    <!-- 명부 내역 삭제 -->
    <sql name="RETC020_DEL">
        <description>명부 내역 삭제</description>
        <query>
            <![CDATA[
              DELETE
                FROM T_AC_RETINSURANCE
               WHERE PIS_YY     = ?
                 AND BNK_CD     = ?
                 AND CET_NO     = ?
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETC030
* @description : 보험회사 명부입력
***********************************************************************
* 2007/04/06     조정호       최초작성
***********************************************************************
-->
    <!-- 퇴직보험 가입내역 조회 -->
    <sql name="RETC030_SHR">
        <description>퇴직보험 가입내역 조회</description>
        <query>
            <![CDATA[
            SELECT D.*
              FROM (SELECT ROW_NUMBER() OVER(PARTITION BY A.ENO_NO
                                                 ORDER BY A.ENO_NO
                                                        , SF_GET_COMMNAME('01', 'BR', B.BNK_CD)
                                             ) AS NUM
                         , A.DPT_NM
                         , A.JOB_NM
                         , A.ENO_NO
                         , A.ENO_NM
                         , TO_CHAR(A.HIRG_YMD, 'YYYY-MM-DD')    AS HIRG_YMD
                         , TO_CHAR(DECODE(A.RAM_YMD3, '', DECODE(A.RAM_YMD2, '', A.RAM_YMD, A.RAM_YMD2), A.RAM_YMD2), 'YYYY-MM-DD') AS RAM_YMD
                         , TO_CHAR(A.RET_YMD, 'YYYY-MM-DD')     AS RET_YMD
                         , B.PIS_YY
                         , B.BNK_CD
                         , SF_GET_COMMNAME('01', 'BR', B.BNK_CD) AS BNK_NM
                         , B.RES_AMT
                         , 0 AS RATE
                         , NVL(C.PAID_AMT, 0) AS PAID_AMT
                         , A.DPT_SEQ
                         , A.JOB_SEQ
                         , A.HOB_SEQ
                      FROM VI_T_CM_PERSON2 A
                INNER JOIN T_AC_RETINSURANCE B
                        ON B.CET_NO = A.CET_NO
                 LEFT JOIN (SELECT SUBSTR(BASIC_YMD,1,4) AS PIS_YY
                                 , ENO_NO
                                 , BNK_CD
                                 , SUM(NVL(PAID_AMT, 0)) AS PAID_AMT    -- 사용금액
                              FROM T_AC_RETINSURANCE_SAV                -- 퇴직보험금 저장 자료
                          GROUP BY ENO_NO
                                 , BNK_CD
                                 , SUBSTR(BASIC_YMD,1,4)
                            ) C
                        ON A.ENO_NO = C.ENO_NO
                       AND B.PIS_YY = C.PIS_YY
                       AND B.BNK_CD = C.BNK_CD
                     WHERE B.PIS_YY = ?
                       AND A.DPT_NM LIKE '%'||?||'%'
                       AND A.ENO_NO LIKE '%'||?||'%'
                    ) D
          ORDER BY D.DPT_SEQ
                 , D.JOB_SEQ
                 , D.HOB_SEQ DESC
                 , D.ENO_NO
                 , D.NUM
            ]]>
        </query>
    </sql>


    <!-- 보험사 리스트 -->
    <sql name="RETC030_SHR_BNK">
        <description>보험사 리스트</description>
        <query>
            <![CDATA[
            SELECT COMM.COMM_CD AS BNK_CD
                  ,COMM.COMM_NM AS BNK_NM
              FROM VI_T_CM_PERSON PERSON
                  ,T_AC_RETINSURANCE RET
                  ,T_CM_COMMON COMM
             WHERE RET.CET_NO = PERSON.CET_NO
               AND RET.BNK_CD = COMM.COMM_CD
               AND PIS_YY = ?
               AND DPT_NM LIKE '%'||?||'%'
             GROUP BY COMM_CD, COMM_NM
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETC040
* @description : 분기별 이자발생 내역
***********************************************************************
* 2007/04/08     조정호       최초작성
***********************************************************************
-->

    <!-- 분기별 이자발생내역 -->
    <sql name="RETC040_SHR">
        <description>분기별 이자발생내역</description>
        <query>
            <![CDATA[
            SELECT C.PIS_YY
                 , C.PIS_QQ
                 , C.BNK_CD
                 , SF_GET_COMMNAME('01', 'BR', C.BNK_CD) AS BNK_NM
                 , NVL(F.RES_AMT    , 0) AS RES_AMT     -- 적립금
                 , NVL(D.PAID_AMT   , 0) AS PAID_AMT    -- 사용내역
                 , NVL(E.INTEREST   , 0) AS INTEREST    -- 이자
                 , 0 AS BAL_AMT                         -- 차액
              FROM (SELECT A.BNK_CD
                         , ? AS PIS_YY
                         , B.PIS_QQ
                      FROM (SELECT COMM_CD AS BNK_CD
                              FROM T_CM_COMMON
                             WHERE CD_GBN = 'BR'
                            ) A
                         , (SELECT '1' AS PIS_QQ FROM DUAL
                             UNION
                            SELECT '2' AS PIS_QQ FROM DUAL
                             UNION
                            SELECT '3' AS PIS_QQ FROM DUAL
                             UNION
                            SELECT '4' AS PIS_QQ FROM DUAL
                            ) B
                    ) C
         LEFT JOIN (SELECT SUBSTR(BASIC_YMD,1,4) AS PIS_YY
                         , TRUNC((SUBSTR(BASIC_YMD,5,2)-1)/3)+1 AS PIS_QQ
                         , BNK_CD
                         , SUM(NVL(PAID_AMT, 0)) AS PAID_AMT    -- 사용금액
                      FROM T_AC_RETINSURANCE_SAV                -- 퇴직보험금 저장 자료
                  GROUP BY BNK_CD
                         , SUBSTR(BASIC_YMD,1,4)
                         , TRUNC((SUBSTR(BASIC_YMD,5,2)-1)/3)+1
                    ) D
                ON C.PIS_YY = D.PIS_YY
               AND C.PIS_QQ = D.PIS_QQ
               AND C.BNK_CD = D.BNK_CD
         LEFT JOIN (SELECT SUBSTR(BASIC_YMD,1,4) AS PIS_YY
                         , TRUNC((SUBSTR(BASIC_YMD,5,2)-1)/3)+1 AS PIS_QQ
                         , BNK_CD
                         , SUM(NVL(INTEREST, 0)) AS INTEREST    -- 이자총액
                      FROM T_AC_RETINTEREST                     -- 퇴직보험이자내역
                  GROUP BY BNK_CD
                         , SUBSTR(BASIC_YMD,1,4)
                         , TRUNC((SUBSTR(BASIC_YMD,5,2)-1)/3)+1
                    ) E
                ON C.PIS_YY = E.PIS_YY
               AND C.PIS_QQ = E.PIS_QQ
               AND C.BNK_CD = E.BNK_CD
         LEFT JOIN (SELECT PIS_YY
                         , BNK_CD
                         , SUM(NVL(RES_AMT, 0)) AS RES_AMT      -- 적립금액
                      FROM T_AC_RETINSURANCE                    -- 퇴직보험금 저장 자료
                  GROUP BY PIS_YY
                         , BNK_CD
                    ) F
                ON C.PIS_YY = F.PIS_YY
               AND C.BNK_CD = F.BNK_CD
             WHERE C.BNK_CD = NVL(?, C.BNK_CD)
          ORDER BY SF_GET_COMMNAME('01', 'BR', C.BNK_CD)
                 , PIS_QQ
            ]]>
        </query>
    </sql>

<!--
***********************************************************************
* @UseCase     : RETC041
* @description : 분기별 이자발생 내역 처리
***********************************************************************
* 2007/04/08     조정호       최초작성
***********************************************************************
-->

    <!-- 퇴직보험금 조회 -->
    <sql name="RETC041_SHR">
        <description>분기별 이자발생 내역 조회</description>
        <query>
            <![CDATA[
            SELECT PIS_YY
                 , PIS_QQ
                 , BNK_CD
                 , SF_GET_COMMNAME('01', 'BR', BNK_CD) AS BNK_NM
                 , INTEREST
                 , TO_CHAR(TO_DATE(BASIC_YMD, 'YYYYMMDD'), 'YYYY-MM-DD') AS BASIC_YMD
              FROM T_AC_RETINTEREST
             WHERE PIS_YY = ?
               AND BNK_CD = ?
          ORDER BY BASIC_YMD DESC
            ]]>
        </query>
    </sql>

    <!-- 분기별 이자발생내역 -->
    <sql name="RETC041_INS">
        <description>분기별 이자발생내역</description>
        <query>
            <![CDATA[
            INSERT
              INTO T_AC_RETINTEREST
                 ( PIS_YY
                 , PIS_QQ
                 , BASIC_YMD
                 , BNK_CD
                 , INTEREST
                 , IPT_MAN
                 , IPT_YMD
                 , UPT_MAN
                 , UPT_YMD)
          VALUES ( SUBSTR(?, 1, 4)
                 , TRUNC((SUBSTR(?, 5, 2)-1)/3)+1
                 , ?
                 , ?
                 , ?
                 , ?
                 , SYSDATE
                 , ?
                 , SYSDATE)
            ]]>
        </query>
    </sql>

    <!-- 분기별 이자발생내역 -->
    <sql name="RETC041_UPT">
        <description>분기별 이자발생내역</description>
        <query>
            <![CDATA[
            UPDATE T_AC_RETINTEREST
               SET INTEREST   = ?
                 , UPT_MAN    = ?
                 , UPT_YMD    = SYSDATE
             WHERE PIS_YY     = ?
               AND BNK_CD     = ?
               AND BASIC_YMD  = ?
            ]]>
        </query>
    </sql>

    <!-- 분기별 이자발생내역 -->
    <sql name="RETC041_DEL">
        <description>분기별 이자발생내역</description>
        <query>
            <![CDATA[
              DELETE
                FROM T_AC_RETINTEREST
               WHERE PIS_YY     = ?
                 AND BNK_CD     = ?
                 AND BASIC_YMD  = ?
            ]]>
        </query>
    </sql>

  <!-- 분기별 이자발생내역 -->
    <sql name="RETB020_PRT">
        <description>분기별 이자발생내역</description>
        <query>
            <![CDATA[
SELECT MAIN.TYPEGBN
      ,MAIN.REG_NM
      ,SUB1.AMT1
      ,SUB2.AMT2
      ,SUB3.AMT3
      ,SUB4.AMT4
      ,SUB4.AMT5
      ,SUB4.AMT6
      ,SUB4.AMT7
      ,RIDX
FROM  (SELECT ROWNUM AS RIDX
             ,TYPEGBN
             ,DECODE(TYPEGBN,'택배직',DECODE(NVL(REG_NM,' '),' ','기타',REG_NM),REG_NM) AS REG_NM
             ,IDX
       FROM  (SELECT DECODE(GROUPING_ID(TYPEGBN,REG_NM), 3, '합계','1',TYPEGBN||'소계',TYPEGBN) AS TYPEGBN
                    ,REG_NM
                    ,GROUPING_ID(TYPEGBN,REG_NM) AS IDX
                    ,DECODE(TYPEGBN,'택배직',DECODE(NVL(REG_NM,' '),' ',999,100),100) AS SEQ
              FROM  (SELECT B.OCC_CD
                           ,SF_GET_COMMNAME('01', 'A1', B.OCC_CD) AS TYPEGBN
                           ,B.PART_CD
                           ,NVL(DECODE(B.OCC_CD , 'A', '', SF_GET_COMMNAME('01', 'B1', B.PART_CD)),'') AS REG_NM
                     FROM   T_CM_PERSON A,
                            T_CM_AHISTORY B
                     WHERE A.ENO_NO = B.ENO_NO
                     AND   TO_CHAR(A.HIRG_YMD,'YYYYMMDD') < TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD')
                     AND  (TO_CHAR(A.RET_YMD,'YYYYMMDD') IS NULL OR TO_CHAR(A.RET_YMD,'YYYYMMDD') >= TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD'))
                     AND   TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD') BETWEEN STR_YMD AND NVL(END_YMD,'99999999')
                     GROUP BY B.PART_CD
                             ,B.OCC_CD
                             ,B.ENO_NO
                    )
              GROUP BY ROLLUP( TYPEGBN,REG_NM )
              ORDER BY TYPEGBN, IDX, SEQ
             )
      -- WHERE (IDX <> 1 )
      ) MAIN

LEFT OUTER JOIN (-- 전년이월금
                 SELECT DECODE(GROUPING_ID(TYPEGBN,REG_NM), 3, '합계','1',TYPEGBN||'소계',TYPEGBN) AS TYPEGBN
                       ,REG_NM
                       ,SUM(TOT_RES_AMT) AS AMT1
                       ,GROUPING_ID(TYPEGBN,REG_NM) AS IDX
                 FROM  (SELECT b.TYPEGBN
                              ,B.PART_CD
                              ,SUM(NVL(A.TOT_RES_AMT,0)) AS TOT_RES_AMT
                              ,DECODE(B.TYPEGBN,'택배직',DECODE(NVL(B.REG_NM,' '),' ','기타',B.REG_NM),B.REG_NM) AS REG_NM
                        FROM   T_AC_RESERVE A
                             ,(SELECT B.ENO_NO
                                     ,B.OCC_CD
                                     ,SF_GET_COMMNAME('01', 'A1', B.OCC_CD) AS TYPEGBN
                                     ,B.PART_CD
                                     ,NVL(DECODE(B.OCC_CD , 'A', '', SF_GET_COMMNAME('01', 'B1', B.PART_CD)),'') AS REG_NM
                               FROM   T_CM_PERSON A,
                                      T_CM_AHISTORY B
                               WHERE A.ENO_NO = B.ENO_NO
                               AND   TO_CHAR(A.HIRG_YMD,'YYYYMMDD') < TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD')
                               AND  (TO_CHAR(A.RET_YMD,'YYYYMMDD') IS NULL OR TO_CHAR(A.RET_YMD,'YYYYMMDD') >= TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD'))
                               AND   TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD') BETWEEN STR_YMD AND NVL(END_YMD,'99999999')
                               GROUP BY B.PART_CD
                                       ,B.OCC_CD
                                       ,B.ENO_NO) B
                        WHERE A.PIS_YY = ?
                        AND   A.PIS_MM = '01'
                        AND   A.ENO_NO = B.ENO_NO
                        GROUP BY b.TYPEGBN
                                ,B.PART_CD
                                ,b.REG_NM
                       )
                 GROUP BY ROLLUP( TYPEGBN,REG_NM )
                ) SUB1
ON MAIN.TYPEGBN||MAIN.REG_NM = SUB1.TYPEGBN||SUB1.REG_NM

LEFT OUTER JOIN  (-- 기중설정액(1월~10월까지 당월충당금의 합계)
                  SELECT DECODE(GROUPING_ID(TYPEGBN,REG_NM), 3, '합계','1',TYPEGBN||'소계',TYPEGBN) AS TYPEGBN
                        ,REG_NM
                        ,SUM(MON_RES_AMT) AS AMT2
                        ,GROUPING_ID(TYPEGBN,REG_NM) AS IDX
                  FROM  (SELECT B.TYPEGBN
                               ,B.PART_CD
                               ,SUM(NVL(A.MON_RES_AMT,0)) AS MON_RES_AMT
                               ,DECODE(B.TYPEGBN,'택배직',DECODE(NVL(B.REG_NM,' '),' ','기타',B.REG_NM),B.REG_NM) AS REG_NM
                         FROM   T_AC_RESERVE A
                              ,(SELECT B.ENO_NO
                                      ,B.OCC_CD
                                      ,SF_GET_COMMNAME('01', 'A1', B.OCC_CD) AS TYPEGBN
                                      ,B.PART_CD
                                      ,NVL(DECODE(B.OCC_CD , 'A', '', SF_GET_COMMNAME('01', 'B1', B.PART_CD)),'') AS REG_NM
                                FROM   T_CM_PERSON A,
                                       T_CM_AHISTORY B
                                WHERE A.ENO_NO = B.ENO_NO
                                AND   TO_CHAR(A.HIRG_YMD,'YYYYMMDD') < TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD')
                                AND  (TO_CHAR(A.RET_YMD,'YYYYMMDD') IS NULL OR TO_CHAR(A.RET_YMD,'YYYYMMDD') >= TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD'))
                                AND   TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD') BETWEEN STR_YMD AND NVL(END_YMD,'99999999')
                                GROUP BY B.PART_CD
                                        ,B.OCC_CD
                                        ,B.ENO_NO) B
                         WHERE A.PIS_YY = ?
                         AND   A.PIS_MM < ?
                         AND   A.ENO_NO = B.ENO_NO
                         GROUP BY A.PIS_YY
                                 ,B.TYPEGBN
                                 ,B.PART_CD
                                 ,B.REG_NM
                        )
                  GROUP BY  ROLLUP( TYPEGBN,REG_NM )
                 ) SUB2
ON MAIN.TYPEGBN||MAIN.REG_NM = SUB2.TYPEGBN||SUB2.REG_NM

LEFT OUTER JOIN  (-- 기중지급액 (퇴직금 TABLE에서 11월의 퇴직금의 합계)
                  SELECT DECODE(GROUPING_ID(TYPEGBN,REG_NM), 3, '합계','1',TYPEGBN||'소계',TYPEGBN) AS TYPEGBN
                        ,REG_NM
                        ,SUM(RTR_AMT) AS AMT3
                        ,GROUPING_ID(TYPEGBN,REG_NM) AS IDX
                  FROM  (SELECT B.TYPEGBN
                               ,B.PART_CD
                               ,SUM(NVL(A.RTR_AMT,0)) AS RTR_AMT
                               ,DECODE(B.TYPEGBN,'택배직',DECODE(NVL(B.REG_NM,' '),' ','기타',B.REG_NM),B.REG_NM) AS REG_NM
                         FROM   T_AC_RETMASTER A
                              ,(SELECT B.ENO_NO
                                      ,B.OCC_CD
                                      ,SF_GET_COMMNAME('01', 'A1', B.OCC_CD) AS TYPEGBN
                                      ,B.PART_CD
                                      ,NVL(DECODE(B.OCC_CD , 'A', '', SF_GET_COMMNAME('01', 'B1', B.PART_CD)),'') AS REG_NM
                                FROM   T_CM_PERSON A,
                                       T_CM_AHISTORY B
                                WHERE A.ENO_NO = B.ENO_NO
                                AND   TO_CHAR(A.HIRG_YMD,'YYYYMMDD') < TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD')
                                AND  (TO_CHAR(A.RET_YMD,'YYYYMMDD') IS NULL OR TO_CHAR(A.RET_YMD,'YYYYMMDD') >= TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD'))
                                AND   TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD') BETWEEN STR_YMD AND NVL(END_YMD,'99999999')
                                GROUP BY B.PART_CD
                                        ,B.OCC_CD
                                        ,B.ENO_NO) B
                         WHERE  SUBSTR(A.RET_YMD,1,6) = ?
                         AND    A.ENO_NO = B.ENO_NO
                         GROUP BY B.TYPEGBN
                                 ,B.PART_CD
                                 ,B.REG_NM
                        )
                  GROUP BY  ROLLUP( TYPEGBN,REG_NM )
                 ) SUB3
ON MAIN.TYPEGBN||MAIN.REG_NM = SUB3.TYPEGBN||SUB3.REG_NM

LEFT OUTER JOIN  (-- 10월말잔액(전월누계충당금의 합계)
                  SELECT DECODE(GROUPING_ID(TYPEGBN,REG_NM), 3, '합계','1',TYPEGBN||'소계',TYPEGBN) AS TYPEGBN
                        ,REG_NM
                        ,SUM(TOT_RES_AMT) AS AMT4
                        ,SUM(RES_AMT) AS AMT5
                        ,SUM(MON_RES_AMT) AS AMT6
                        ,(SUM(RES_AMT) - SUM(TOT_RES_AMT) ) AS AMT7
                        ,GROUPING_ID(TYPEGBN,REG_NM) AS IDX
                  FROM  (SELECT B.TYPEGBN
                               ,B.PART_CD
                               ,SUM(NVL(A.TOT_RES_AMT,0)) AS TOT_RES_AMT
                               ,SUM(NVL(A.RES_AMT,0)) AS RES_AMT
                               ,SUM(NVL(A.MON_RES_AMT,0)) AS MON_RES_AMT
                               ,DECODE(B.TYPEGBN,'택배직',DECODE(NVL(B.REG_NM,' '),' ','기타',B.REG_NM),B.REG_NM) AS REG_NM
                         FROM   T_AC_RESERVE A
                              ,(SELECT B.ENO_NO
                                      ,B.OCC_CD
                                      ,SF_GET_COMMNAME('01', 'A1', B.OCC_CD) AS TYPEGBN
                                      ,B.PART_CD
                                      ,NVL(DECODE(B.OCC_CD , 'A', '', SF_GET_COMMNAME('01', 'B1', B.PART_CD)),'') AS REG_NM
                                FROM   T_CM_PERSON A,
                                       T_CM_AHISTORY B
                                WHERE A.ENO_NO = B.ENO_NO
                                AND   TO_CHAR(A.HIRG_YMD,'YYYYMMDD') < TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD')
                                AND  (TO_CHAR(A.RET_YMD,'YYYYMMDD') IS NULL OR TO_CHAR(A.RET_YMD,'YYYYMMDD') >= TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD'))
                                AND   TO_CHAR(LAST_DAY(TO_DATE(?, 'YYYYMM')), 'YYYYMMDD') BETWEEN STR_YMD AND NVL(END_YMD,'99999999')
                                GROUP BY B.PART_CD
                                        ,B.OCC_CD
                                        ,B.ENO_NO) B
                         WHERE  A.PIS_YY = ?
                         AND    A.PIS_MM = ?
                         AND    A.ENO_NO = B.ENO_NO
                         GROUP BY A.PIS_YY
                                 ,B.TYPEGBN
                                 ,B.PART_CD
                                 ,B.REG_NM
                        )
                  GROUP BY  ROLLUP( TYPEGBN,REG_NM )
                 ) SUB4
ON MAIN.TYPEGBN||MAIN.REG_NM = SUB4.TYPEGBN||SUB4.REG_NM

ORDER BY RIDX
                        ]]>
        </query>
    </sql>




  <!-- 퇴직급여신청내역 인쇄 -->
    <sql name="RETA020_PRT">
        <description>퇴직급여신청내역 인쇄</description>
        <query>
            <![CDATA[

SELECT
ENO_NO,ENO_NM,OCC_CD,OCC_NM,JOB_NM,DPT_NM,HIRG_YMD,RAM_YMD,SEQ_NO,STR_YMD,BASIC_YMD,APP_YN,APP_YMD,APP_PAY,REASON,IS_PROC,ICM_TAX,DBW_TAX,DJM_TAX,IPT_YMD,CITIB,CTMMDA,HANEXP,UCKSDM,WMMDA,WOMMDA,CHBMP
,a1,NPER,A3,BPER,NPAY,BPAY,SANG
,TRUNC((NPAY + SANG) ) AS NAMT
,TRUNC((BPAY + SANG) ) AS BAMT
,TRUNC((NPAY + SANG) * NPER) AS TNAMT
,TRUNC((BPAY + SANG) * BPER) AS TBAMT
,(((NPAY + SANG) * NPER) - ((BPAY + SANG) * BPER)) AS SAMT
, ROUND (((BPAY + SANG) * BPER) / ((NPAY + SANG) * NPER)   * 100) AS SPER
,CITIB_NM
                  ,CTMMDA_NM
                  ,HANEXP_NM
                  ,UCKSDM_NM
                  ,WMMDA_NM
                  ,WOMMDA_NM
                  ,CHBMP_NM
                  ,KUK

FROM
(

SELECT REQ.ENO_NO
                  ,ENO_NM
                  ,OCC_CD
                  ,OCC_CD||' '||OCC_NM AS OCC_NM
                  ,JOB_NM
                  ,DPT_NM
                  ,TO_CHAR(HIRG_YMD, 'YYYY-MM-DD') AS HIRG_YMD
                  ,TO_CHAR(DECODE(RAM_YMD3, '', DECODE(RAM_YMD2, '', RAM_YMD, RAM_YMD2), RAM_YMD2), 'YYYY-MM-DD') AS RAM_YMD
                  ,REQ.SEQ_NO
                  ,TO_CHAR(DECODE(REQ.SEQ_NO
                                 , '1', PERSON.HIRG_YMD
                                 , '2', NVL2(PERSON.RAM_YMD
                                            , PERSON.RAM_YMD
                                            , PERSON.HIRG_YMD)
                                 , '3', NVL2(PERSON.RAM_YMD2
                                            , PERSON.RAM_YMD2
                                            , NVL2(PERSON.RAM_YMD
                                                  , PERSON.RAM_YMD
                                                  , PERSON.HIRG_YMD))
                                 , '0', NVL2(PERSON.RAM_YMD3
                                            , PERSON.RAM_YMD3
                                            , NVL2(PERSON.RAM_YMD2
                                                  , PERSON.RAM_YMD2
                                                  , NVL2(PERSON.RAM_YMD
                                                        , PERSON.RAM_YMD
                                                        , PERSON.HIRG_YMD)))), 'YYYY-MM-DD') AS STR_YMD
                  ,BASIC_YMD
                  ,APP_YN
                  ,APP_YMD
                  ,NVL(APP_PAY, 0) AS APP_PAY
                  ,REASON
                  ,NVL2(DECODE(REQ.SEQ_NO
                              , '0', PERSON.RET_YMD
                              , '1', PERSON.RAM_YMD
                              , '2', PERSON.RAM_YMD2
                              , '3', PERSON.RAM_YMD3)
                       ,'N'
                       ,'Y') AS IS_PROC
                  ,NVL(ICM_TAX,0) AS ICM_TAX
                  ,NVL(DBW_TAX,0) AS DBW_TAX
                  ,NVL(DJM_TAX,0) AS DJM_TAX
                  ,TO_CHAR(REQ.IPT_YMD, 'YYYY-MM-DD') AS IPT_YMD
                  ,DECODE(APP_YN, 'T', NVL(BNK0.RES_AMT, 0), 0) AS CITIB
                  ,DECODE(APP_YN, 'T', NVL(BNK1.RES_AMT, 0), 0) AS CTMMDA
                  ,DECODE(APP_YN, 'T', NVL(BNK2.RES_AMT, 0), 0) AS HANEXP
                  ,DECODE(APP_YN, 'T', NVL(BNK3.RES_AMT, 0), 0) AS UCKSDM
                  ,DECODE(APP_YN, 'T', NVL(BNK4.RES_AMT, 0), 0) AS WMMDA
                  ,DECODE(APP_YN, 'T', NVL(BNK5.RES_AMT, 0), 0) AS WOMMDA
                  ,DECODE(APP_YN, 'T', NVL(BNK6.RES_AMT, 0), 0) AS CHBMP
                  ,BNK0.BNK_NM AS CITIB_NM
                  ,BNK1.BNK_NM AS CTMMDA_NM
                  ,BNK2.BNK_NM AS HANEXP_NM
                  ,BNK3.BNK_NM AS UCKSDM_NM
                  ,BNK4.BNK_NM AS WMMDA_NM
                  ,BNK5.BNK_NM AS WOMMDA_NM
                  ,BNK6.BNK_NM AS CHBMP_NM


                  ,SF_GET_YEAR_NM(PERSON.HIRG_YMD, SYSDATE)  as a1
                  ,SF_GET_YEAR_per(PERSON.HIRG_YMD, TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')) as NPER
                  ,SF_GET_YEAR_NM(PERSON.HIRG_YMD, BASIC_YMD) as a3
                  ,SF_GET_YEAR_per(PERSON.HIRG_YMD, BASIC_YMD) as BPER
                  ,SF_GET_AVG_PAY(PERSON.ENO_NO, SYSDATE) AS NPAY
                  ,SF_GET_AVG_PAY(PERSON.ENO_NO, TO_DATE(BASIC_YMD,'YYYY-MM-DD')) AS BPAY
                  ,SF_GET_AVG_SANG(PERSON.ENO_NO) AS SANG
                  ,SF_GET_AVG_KUKMIN(PERSON.ENO_NO) AS KUK



              FROM (SELECT ENO_NO
                          ,SEQ_NO
                          ,TO_CHAR(BASIC_YMD, 'YYYY-MM-DD') AS BASIC_YMD
                          ,APP_YN
                          ,APP_YMD
                          ,APP_PAY
                          ,REASON
                          ,IPT_YMD
                      FROM T_AC_RETACCREQ) REQ
        INNER JOIN VI_T_CM_PERSON PERSON
                ON REQ.ENO_NO = PERSON.ENO_NO
         LEFT JOIN T_AC_RETTABLE RET
                ON REQ.ENO_NO = RET.ENO_NO
               AND TO_CHAR(DECODE(REQ.SEQ_NO
                                 , '0', PERSON.RET_YMD
                                 , '1', PERSON.RAM_YMD
                                 , '2', PERSON.RAM_YMD2
                                 , '3', PERSON.RAM_YMD3)
                          ,'YYYYMM') = RET.PRO_YM
               AND RET.GBN_CD = '9'
         LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'CITIB') BNK0
                ON BNK0.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK0.ENO_NO = REQ.ENO_NO
         LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'CTMMDA') BNK1
                ON BNK1.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK1.ENO_NO = REQ.ENO_NO
         LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'HANEXP') BNK2
                ON BNK2.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK2.ENO_NO = REQ.ENO_NO

          LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'UCKSDM') BNK3
                ON BNK3.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK3.ENO_NO = REQ.ENO_NO

          LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'WMMDA') BNK4
                ON BNK4.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK4.ENO_NO = REQ.ENO_NO

          LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'WOMMDA') BNK5
                ON BNK5.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK5.ENO_NO = REQ.ENO_NO
             LEFT JOIN (SELECT PIS_YY
                          ,PERSON.ENO_NO
                          ,BNK_CD
                          ,COMM_NM BNK_NM
                          ,NVL(RES_AMT, 0) - (SELECT NVL(SUM(PAID_AMT),0)
                                                FROM T_AC_RETINSURANCE_SAV USE_RET_SAV
                                               WHERE PERSON.ENO_NO  = USE_RET_SAV.ENO_NO
                                                 AND RET.PIS_YY     = USE_RET_SAV.PIS_YY) AS RES_AMT
                      FROM VI_T_CM_PERSON PERSON
                          ,T_AC_RETINSURANCE RET
                          ,T_CM_COMMON COMM
                     WHERE COMM.CD_GBN = 'BR'
                       AND RET.CET_NO = PERSON.CET_NO
                       AND RET.BNK_CD = COMM.COMM_CD
                       AND RET.BNK_CD = 'CHBMP') BNK6
                ON BNK6.PIS_YY = TO_CHAR(TO_DATE(REQ.IPT_YMD), 'YYYY')
               AND BNK6.ENO_NO = REQ.ENO_NO



             WHERE TO_CHAR(REQ.IPT_YMD, 'YYYY-MM-DD')
                   BETWEEN TO_CHAR(TO_DATE(?,'YYYY-MM-DD'),'YYYY-MM-DD')
                       AND TO_CHAR(TO_DATE(?,'YYYY-MM-DD'),'YYYY-MM-DD')
               AND DPT_CD LIKE ? || '%'
               AND APP_YN LIKE ? || '%'
          ORDER BY SEQ_NO

)
            ]]>
        </query>
    </sql>
</sqls>